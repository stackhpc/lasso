<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded("lasso")) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_lasso.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX is available as of PHP 4.3.0, for older PHP assume 'so'.
    // It gives 'dylib' on MacOS X which is for libraries, modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'PHP_SHLIB_SUFFIX' || PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('lasso.so')) return;
    } else {
      if (!dl('lasso.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class lasso {
	const LASSO_WSF_SUPPORT = LASSO_WSF_SUPPORT;

	const LASSO_HTTP_METHOD_NONE = LASSO_HTTP_METHOD_NONE;

	const LASSO_HTTP_METHOD_ANY = LASSO_HTTP_METHOD_ANY;

	const LASSO_HTTP_METHOD_IDP_INITIATED = LASSO_HTTP_METHOD_IDP_INITIATED;

	const LASSO_HTTP_METHOD_GET = LASSO_HTTP_METHOD_GET;

	const LASSO_HTTP_METHOD_POST = LASSO_HTTP_METHOD_POST;

	const LASSO_HTTP_METHOD_REDIRECT = LASSO_HTTP_METHOD_REDIRECT;

	const LASSO_HTTP_METHOD_SOAP = LASSO_HTTP_METHOD_SOAP;

	const LASSO_HTTP_METHOD_ARTIFACT_GET = LASSO_HTTP_METHOD_ARTIFACT_GET;

	const LASSO_HTTP_METHOD_ARTIFACT_POST = LASSO_HTTP_METHOD_ARTIFACT_POST;

	const LASSO_MD_PROTOCOL_TYPE_FEDERATION_TERMINATION = LASSO_MD_PROTOCOL_TYPE_FEDERATION_TERMINATION;

	const LASSO_MD_PROTOCOL_TYPE_NAME_IDENTIFIER_MAPPING = LASSO_MD_PROTOCOL_TYPE_NAME_IDENTIFIER_MAPPING;

	const LASSO_MD_PROTOCOL_TYPE_REGISTER_NAME_IDENTIFIER = LASSO_MD_PROTOCOL_TYPE_REGISTER_NAME_IDENTIFIER;

	const LASSO_MD_PROTOCOL_TYPE_SINGLE_LOGOUT = LASSO_MD_PROTOCOL_TYPE_SINGLE_LOGOUT;

	const LASSO_MD_PROTOCOL_TYPE_SINGLE_SIGN_ON = LASSO_MD_PROTOCOL_TYPE_SINGLE_SIGN_ON;

	const LASSO_MD_PROTOCOL_TYPE_ARTIFACT_RESOLUTION = LASSO_MD_PROTOCOL_TYPE_ARTIFACT_RESOLUTION;

	const LASSO_MD_PROTOCOL_TYPE_MANAGE_NAME_ID = LASSO_MD_PROTOCOL_TYPE_MANAGE_NAME_ID;

	const LASSO_MD_PROTOCOL_TYPE_ASSERTION_ID_REQUEST = LASSO_MD_PROTOCOL_TYPE_ASSERTION_ID_REQUEST;

	const LASSO_LIB_CONSENT_OBTAINED = LASSO_LIB_CONSENT_OBTAINED;

	const LASSO_LIB_CONSENT_OBTAINED_PRIOR = LASSO_LIB_CONSENT_OBTAINED_PRIOR;

	const LASSO_LIB_CONSENT_OBTAINED_CURRENT_IMPLICIT = LASSO_LIB_CONSENT_OBTAINED_CURRENT_IMPLICIT;

	const LASSO_LIB_CONSENT_OBTAINED_CURRENT_EXPLICIT = LASSO_LIB_CONSENT_OBTAINED_CURRENT_EXPLICIT;

	const LASSO_LIB_CONSENT_UNAVAILABLE = LASSO_LIB_CONSENT_UNAVAILABLE;

	const LASSO_LIB_CONSENT_INAPPLICABLE = LASSO_LIB_CONSENT_INAPPLICABLE;

	const LASSO_LIB_NAMEID_POLICY_TYPE_NONE = LASSO_LIB_NAMEID_POLICY_TYPE_NONE;

	const LASSO_LIB_NAMEID_POLICY_TYPE_ONE_TIME = LASSO_LIB_NAMEID_POLICY_TYPE_ONE_TIME;

	const LASSO_LIB_NAMEID_POLICY_TYPE_FEDERATED = LASSO_LIB_NAMEID_POLICY_TYPE_FEDERATED;

	const LASSO_LIB_NAMEID_POLICY_TYPE_ANY = LASSO_LIB_NAMEID_POLICY_TYPE_ANY;

	const LASSO_LIB_PROTOCOL_PROFILE_BRWS_ART = LASSO_LIB_PROTOCOL_PROFILE_BRWS_ART;

	const LASSO_LIB_PROTOCOL_PROFILE_BRWS_POST = LASSO_LIB_PROTOCOL_PROFILE_BRWS_POST;

	const LASSO_LIB_PROTOCOL_PROFILE_BRWS_LECP = LASSO_LIB_PROTOCOL_PROFILE_BRWS_LECP;

	const LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_IDP_HTTP = LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_IDP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_IDP_SOAP = LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_IDP_SOAP;

	const LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_SP_HTTP = LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_SP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_SP_SOAP = LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_SP_SOAP;

	const LASSO_LIB_PROTOCOL_PROFILE_RNI_IDP_HTTP = LASSO_LIB_PROTOCOL_PROFILE_RNI_IDP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_RNI_IDP_SOAP = LASSO_LIB_PROTOCOL_PROFILE_RNI_IDP_SOAP;

	const LASSO_LIB_PROTOCOL_PROFILE_RNI_SP_HTTP = LASSO_LIB_PROTOCOL_PROFILE_RNI_SP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_RNI_SP_SOAP = LASSO_LIB_PROTOCOL_PROFILE_RNI_SP_SOAP;

	const LASSO_LIB_PROTOCOL_PROFILE_SLO_IDP_HTTP = LASSO_LIB_PROTOCOL_PROFILE_SLO_IDP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_SLO_IDP_SOAP = LASSO_LIB_PROTOCOL_PROFILE_SLO_IDP_SOAP;

	const LASSO_LIB_PROTOCOL_PROFILE_SLO_SP_HTTP = LASSO_LIB_PROTOCOL_PROFILE_SLO_SP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_SLO_SP_SOAP = LASSO_LIB_PROTOCOL_PROFILE_SLO_SP_SOAP;

	const LASSO_LOGIN_PROTOCOL_PROFILE_BRWS_ART = LASSO_LOGIN_PROTOCOL_PROFILE_BRWS_ART;

	const LASSO_LOGIN_PROTOCOL_PROFILE_BRWS_POST = LASSO_LOGIN_PROTOCOL_PROFILE_BRWS_POST;

	const LASSO_LOGIN_PROTOCOL_PROFILE_BRWS_LECP = LASSO_LOGIN_PROTOCOL_PROFILE_BRWS_LECP;

	const LASSO_PROVIDER_ROLE_NONE = LASSO_PROVIDER_ROLE_NONE;

	const LASSO_PROVIDER_ROLE_SP = LASSO_PROVIDER_ROLE_SP;

	const LASSO_PROVIDER_ROLE_IDP = LASSO_PROVIDER_ROLE_IDP;

	const LASSO_PROTOCOL_LIBERTY_1_0 = LASSO_PROTOCOL_LIBERTY_1_0;

	const LASSO_PROTOCOL_LIBERTY_1_1 = LASSO_PROTOCOL_LIBERTY_1_1;

	const LASSO_PROTOCOL_LIBERTY_1_2 = LASSO_PROTOCOL_LIBERTY_1_2;

	const LASSO_PROTOCOL_SAML_2_0 = LASSO_PROTOCOL_SAML_2_0;

	const LASSO_REQUEST_TYPE_INVALID = LASSO_REQUEST_TYPE_INVALID;

	const LASSO_REQUEST_TYPE_LOGIN = LASSO_REQUEST_TYPE_LOGIN;

	const LASSO_REQUEST_TYPE_LOGOUT = LASSO_REQUEST_TYPE_LOGOUT;

	const LASSO_REQUEST_TYPE_DEFEDERATION = LASSO_REQUEST_TYPE_DEFEDERATION;

	const LASSO_REQUEST_TYPE_NAME_REGISTRATION = LASSO_REQUEST_TYPE_NAME_REGISTRATION;

	const LASSO_REQUEST_TYPE_NAME_IDENTIFIER_MAPPING = LASSO_REQUEST_TYPE_NAME_IDENTIFIER_MAPPING;

	const LASSO_REQUEST_TYPE_LECP = LASSO_REQUEST_TYPE_LECP;

	const LASSO_REQUEST_TYPE_DISCO_QUERY = LASSO_REQUEST_TYPE_DISCO_QUERY;

	const LASSO_REQUEST_TYPE_DISCO_MODIFY = LASSO_REQUEST_TYPE_DISCO_MODIFY;

	const LASSO_REQUEST_TYPE_DST_QUERY = LASSO_REQUEST_TYPE_DST_QUERY;

	const LASSO_REQUEST_TYPE_DST_MODIFY = LASSO_REQUEST_TYPE_DST_MODIFY;

	const LASSO_REQUEST_TYPE_SASL_REQUEST = LASSO_REQUEST_TYPE_SASL_REQUEST;

	const LASSO_REQUEST_TYPE_NAME_ID_MANAGEMENT = LASSO_REQUEST_TYPE_NAME_ID_MANAGEMENT;

	const LASSO_REQUEST_TYPE_IDWSF2_DISCO_SVCMD_REGISTER = LASSO_REQUEST_TYPE_IDWSF2_DISCO_SVCMD_REGISTER;

	const LASSO_REQUEST_TYPE_IDWSF2_DISCO_SVCMD_ASSOCIATION_ADD = LASSO_REQUEST_TYPE_IDWSF2_DISCO_SVCMD_ASSOCIATION_ADD;

	const LASSO_REQUEST_TYPE_IDWSF2_DISCO_QUERY = LASSO_REQUEST_TYPE_IDWSF2_DISCO_QUERY;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_INTERNET_PROTOCOL = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_INTERNET_PROTOCOL;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_INTERNET_PROTOCOL_PASSWORD = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_INTERNET_PROTOCOL_PASSWORD;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_ONE_FACTOR_UNREGISTERED = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_ONE_FACTOR_UNREGISTERED;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_TWO_FACTOR_UNREGISTERED = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_TWO_FACTOR_UNREGISTERED;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_ONE_FACTOR_CONTRACT = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_ONE_FACTOR_CONTRACT;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_TWO_FACTOR_CONTRACT = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_TWO_FACTOR_CONTRACT;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_PASSWORD = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_PASSWORD;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_PASSWORD_PROTECTED_TRANSPORT = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_PASSWORD_PROTECTED_TRANSPORT;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_PREVIOUS_SESSION = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_PREVIOUS_SESSION;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_SMARTCARD = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_SMARTCARD;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_SMARTCARD_PKI = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_SMARTCARD_PKI;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_SOFTWARE_PKI = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_SOFTWARE_PKI;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_TIME_SYNC_TOKEN = LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_TIME_SYNC_TOKEN;

	const LASSO_LIB_AUTHN_CONTEXT_COMPARISON_EXACT = LASSO_LIB_AUTHN_CONTEXT_COMPARISON_EXACT;

	const LASSO_LIB_AUTHN_CONTEXT_COMPARISON_MINIMUM = LASSO_LIB_AUTHN_CONTEXT_COMPARISON_MINIMUM;

	const LASSO_LIB_AUTHN_CONTEXT_COMPARISON_MAXIMUM = LASSO_LIB_AUTHN_CONTEXT_COMPARISON_MAXIMUM;

	const LASSO_LIB_AUTHN_CONTEXT_COMPARISON_BETTER = LASSO_LIB_AUTHN_CONTEXT_COMPARISON_BETTER;

	const LASSO_SAML_AUTHENTICATION_METHOD_PASSWORD = LASSO_SAML_AUTHENTICATION_METHOD_PASSWORD;

	const LASSO_SAML_AUTHENTICATION_METHOD_KERBEROS = LASSO_SAML_AUTHENTICATION_METHOD_KERBEROS;

	const LASSO_SAML_AUTHENTICATION_METHOD_SECURE_REMOTE_PASSWORD = LASSO_SAML_AUTHENTICATION_METHOD_SECURE_REMOTE_PASSWORD;

	const LASSO_SAML_AUTHENTICATION_METHOD_HARDWARE_TOKEN = LASSO_SAML_AUTHENTICATION_METHOD_HARDWARE_TOKEN;

	const LASSO_SAML_AUTHENTICATION_METHOD_SMARTCARD_PKI = LASSO_SAML_AUTHENTICATION_METHOD_SMARTCARD_PKI;

	const LASSO_SAML_AUTHENTICATION_METHOD_SOFTWARE_PKI = LASSO_SAML_AUTHENTICATION_METHOD_SOFTWARE_PKI;

	const LASSO_SAML_AUTHENTICATION_METHOD_PGP = LASSO_SAML_AUTHENTICATION_METHOD_PGP;

	const LASSO_SAML_AUTHENTICATION_METHODS_PKI = LASSO_SAML_AUTHENTICATION_METHODS_PKI;

	const LASSO_SAML_AUTHENTICATION_METHOD_XKMS = LASSO_SAML_AUTHENTICATION_METHOD_XKMS;

	const LASSO_SAML_AUTHENTICATION_METHOD_XMLD_SIG = LASSO_SAML_AUTHENTICATION_METHOD_XMLD_SIG;

	const LASSO_SAML_AUTHENTICATION_METHOD_UNSPECIFIED = LASSO_SAML_AUTHENTICATION_METHOD_UNSPECIFIED;

	const LASSO_SAML_AUTHENTICATION_METHOD_LIBERTY = LASSO_SAML_AUTHENTICATION_METHOD_LIBERTY;

	const LASSO_SIGNATURE_TYPE_NONE = LASSO_SIGNATURE_TYPE_NONE;

	const LASSO_SIGNATURE_TYPE_SIMPLE = LASSO_SIGNATURE_TYPE_SIMPLE;

	const LASSO_SIGNATURE_TYPE_WITHX509 = LASSO_SIGNATURE_TYPE_WITHX509;

	const LASSO_SIGNATURE_METHOD_RSA_SHA1 = LASSO_SIGNATURE_METHOD_RSA_SHA1;

	const LASSO_SIGNATURE_METHOD_DSA_SHA1 = LASSO_SIGNATURE_METHOD_DSA_SHA1;

	const LASSO_ENCRYPTION_MODE_NONE = LASSO_ENCRYPTION_MODE_NONE;

	const LASSO_ENCRYPTION_MODE_NAMEID = LASSO_ENCRYPTION_MODE_NAMEID;

	const LASSO_ENCRYPTION_MODE_ASSERTION = LASSO_ENCRYPTION_MODE_ASSERTION;

	const LASSO_ENCRYPTION_SYM_KEY_TYPE_DEFAULT = LASSO_ENCRYPTION_SYM_KEY_TYPE_DEFAULT;

	const LASSO_ENCRYPTION_SYM_KEY_TYPE_AES_256 = LASSO_ENCRYPTION_SYM_KEY_TYPE_AES_256;

	const LASSO_ENCRYPTION_SYM_KEY_TYPE_AES_128 = LASSO_ENCRYPTION_SYM_KEY_TYPE_AES_128;

	const LASSO_ENCRYPTION_SYM_KEY_TYPE_3DES = LASSO_ENCRYPTION_SYM_KEY_TYPE_3DES;

	const LASSO_ERROR_UNDEFINED = LASSO_ERROR_UNDEFINED;

	const LASSO_ERROR_UNIMPLEMENTED = LASSO_ERROR_UNIMPLEMENTED;

	const LASSO_XML_ERROR_NODE_NOT_FOUND = LASSO_XML_ERROR_NODE_NOT_FOUND;

	const LASSO_XML_ERROR_NODE_CONTENT_NOT_FOUND = LASSO_XML_ERROR_NODE_CONTENT_NOT_FOUND;

	const LASSO_XML_ERROR_ATTR_NOT_FOUND = LASSO_XML_ERROR_ATTR_NOT_FOUND;

	const LASSO_XML_ERROR_ATTR_VALUE_NOT_FOUND = LASSO_XML_ERROR_ATTR_VALUE_NOT_FOUND;

	const LASSO_XML_ERROR_INVALID_FILE = LASSO_XML_ERROR_INVALID_FILE;

	const LASSO_XML_ERROR_OBJECT_CONSTRUCTION_FAILED = LASSO_XML_ERROR_OBJECT_CONSTRUCTION_FAILED;

	const LASSO_XML_ERROR_MISSING_NAMESPACE = LASSO_XML_ERROR_MISSING_NAMESPACE;

	const LASSO_DS_ERROR_SIGNATURE_NOT_FOUND = LASSO_DS_ERROR_SIGNATURE_NOT_FOUND;

	const LASSO_DS_ERROR_INVALID_SIGNATURE = LASSO_DS_ERROR_INVALID_SIGNATURE;

	const LASSO_DS_ERROR_SIGNATURE_TMPL_CREATION_FAILED = LASSO_DS_ERROR_SIGNATURE_TMPL_CREATION_FAILED;

	const LASSO_DS_ERROR_CONTEXT_CREATION_FAILED = LASSO_DS_ERROR_CONTEXT_CREATION_FAILED;

	const LASSO_DS_ERROR_PUBLIC_KEY_LOAD_FAILED = LASSO_DS_ERROR_PUBLIC_KEY_LOAD_FAILED;

	const LASSO_DS_ERROR_PRIVATE_KEY_LOAD_FAILED = LASSO_DS_ERROR_PRIVATE_KEY_LOAD_FAILED;

	const LASSO_DS_ERROR_CERTIFICATE_LOAD_FAILED = LASSO_DS_ERROR_CERTIFICATE_LOAD_FAILED;

	const LASSO_DS_ERROR_SIGNATURE_FAILED = LASSO_DS_ERROR_SIGNATURE_FAILED;

	const LASSO_DS_ERROR_KEYS_MNGR_CREATION_FAILED = LASSO_DS_ERROR_KEYS_MNGR_CREATION_FAILED;

	const LASSO_DS_ERROR_KEYS_MNGR_INIT_FAILED = LASSO_DS_ERROR_KEYS_MNGR_INIT_FAILED;

	const LASSO_DS_ERROR_SIGNATURE_VERIFICATION_FAILED = LASSO_DS_ERROR_SIGNATURE_VERIFICATION_FAILED;

	const LASSO_DS_ERROR_CA_CERT_CHAIN_LOAD_FAILED = LASSO_DS_ERROR_CA_CERT_CHAIN_LOAD_FAILED;

	const LASSO_DS_ERROR_INVALID_SIGALG = LASSO_DS_ERROR_INVALID_SIGALG;

	const LASSO_DS_ERROR_DIGEST_COMPUTE_FAILED = LASSO_DS_ERROR_DIGEST_COMPUTE_FAILED;

	const LASSO_DS_ERROR_SIGNATURE_TEMPLATE_NOT_FOUND = LASSO_DS_ERROR_SIGNATURE_TEMPLATE_NOT_FOUND;

	const LASSO_SERVER_ERROR_PROVIDER_NOT_FOUND = LASSO_SERVER_ERROR_PROVIDER_NOT_FOUND;

	const LASSO_SERVER_ERROR_ADD_PROVIDER_FAILED = LASSO_SERVER_ERROR_ADD_PROVIDER_FAILED;

	const LASSO_SERVER_ERROR_ADD_PROVIDER_PROTOCOL_MISMATCH = LASSO_SERVER_ERROR_ADD_PROVIDER_PROTOCOL_MISMATCH;

	const LASSO_SERVER_ERROR_SET_ENCRYPTION_PRIVATE_KEY_FAILED = LASSO_SERVER_ERROR_SET_ENCRYPTION_PRIVATE_KEY_FAILED;

	const LASSO_SERVER_ERROR_INVALID_XML = LASSO_SERVER_ERROR_INVALID_XML;

	const LASSO_LOGOUT_ERROR_UNSUPPORTED_PROFILE = LASSO_LOGOUT_ERROR_UNSUPPORTED_PROFILE;

	const LASSO_LOGOUT_ERROR_REQUEST_DENIED = LASSO_LOGOUT_ERROR_REQUEST_DENIED;

	const LASSO_LOGOUT_ERROR_FEDERATION_NOT_FOUND = LASSO_LOGOUT_ERROR_FEDERATION_NOT_FOUND;

	const LASSO_LOGOUT_ERROR_UNKNOWN_PRINCIPAL = LASSO_LOGOUT_ERROR_UNKNOWN_PRINCIPAL;

	const LASSO_PROFILE_ERROR_INVALID_QUERY = LASSO_PROFILE_ERROR_INVALID_QUERY;

	const LASSO_PROFILE_ERROR_INVALID_POST_MSG = LASSO_PROFILE_ERROR_INVALID_POST_MSG;

	const LASSO_PROFILE_ERROR_INVALID_SOAP_MSG = LASSO_PROFILE_ERROR_INVALID_SOAP_MSG;

	const LASSO_PROFILE_ERROR_MISSING_REQUEST = LASSO_PROFILE_ERROR_MISSING_REQUEST;

	const LASSO_PROFILE_ERROR_INVALID_HTTP_METHOD = LASSO_PROFILE_ERROR_INVALID_HTTP_METHOD;

	const LASSO_PROFILE_ERROR_INVALID_PROTOCOLPROFILE = LASSO_PROFILE_ERROR_INVALID_PROTOCOLPROFILE;

	const LASSO_PROFILE_ERROR_INVALID_MSG = LASSO_PROFILE_ERROR_INVALID_MSG;

	const LASSO_PROFILE_ERROR_MISSING_REMOTE_PROVIDERID = LASSO_PROFILE_ERROR_MISSING_REMOTE_PROVIDERID;

	const LASSO_PROFILE_ERROR_UNSUPPORTED_PROFILE = LASSO_PROFILE_ERROR_UNSUPPORTED_PROFILE;

	const LASSO_PROFILE_ERROR_UNKNOWN_PROFILE_URL = LASSO_PROFILE_ERROR_UNKNOWN_PROFILE_URL;

	const LASSO_PROFILE_ERROR_IDENTITY_NOT_FOUND = LASSO_PROFILE_ERROR_IDENTITY_NOT_FOUND;

	const LASSO_PROFILE_ERROR_FEDERATION_NOT_FOUND = LASSO_PROFILE_ERROR_FEDERATION_NOT_FOUND;

	const LASSO_PROFILE_ERROR_NAME_IDENTIFIER_NOT_FOUND = LASSO_PROFILE_ERROR_NAME_IDENTIFIER_NOT_FOUND;

	const LASSO_PROFILE_ERROR_BUILDING_QUERY_FAILED = LASSO_PROFILE_ERROR_BUILDING_QUERY_FAILED;

	const LASSO_PROFILE_ERROR_BUILDING_REQUEST_FAILED = LASSO_PROFILE_ERROR_BUILDING_REQUEST_FAILED;

	const LASSO_PROFILE_ERROR_BUILDING_MESSAGE_FAILED = LASSO_PROFILE_ERROR_BUILDING_MESSAGE_FAILED;

	const LASSO_PROFILE_ERROR_BUILDING_RESPONSE_FAILED = LASSO_PROFILE_ERROR_BUILDING_RESPONSE_FAILED;

	const LASSO_PROFILE_ERROR_SESSION_NOT_FOUND = LASSO_PROFILE_ERROR_SESSION_NOT_FOUND;

	const LASSO_PROFILE_ERROR_BAD_IDENTITY_DUMP = LASSO_PROFILE_ERROR_BAD_IDENTITY_DUMP;

	const LASSO_PROFILE_ERROR_BAD_SESSION_DUMP = LASSO_PROFILE_ERROR_BAD_SESSION_DUMP;

	const LASSO_PROFILE_ERROR_MISSING_RESPONSE = LASSO_PROFILE_ERROR_MISSING_RESPONSE;

	const LASSO_PROFILE_ERROR_MISSING_STATUS_CODE = LASSO_PROFILE_ERROR_MISSING_STATUS_CODE;

	const LASSO_PROFILE_ERROR_MISSING_ARTIFACT = LASSO_PROFILE_ERROR_MISSING_ARTIFACT;

	const LASSO_PROFILE_ERROR_MISSING_RESOURCE_OFFERING = LASSO_PROFILE_ERROR_MISSING_RESOURCE_OFFERING;

	const LASSO_PROFILE_ERROR_MISSING_SERVICE_DESCRIPTION = LASSO_PROFILE_ERROR_MISSING_SERVICE_DESCRIPTION;

	const LASSO_PROFILE_ERROR_MISSING_SERVICE_TYPE = LASSO_PROFILE_ERROR_MISSING_SERVICE_TYPE;

	const LASSO_PROFILE_ERROR_MISSING_ASSERTION = LASSO_PROFILE_ERROR_MISSING_ASSERTION;

	const LASSO_PROFILE_ERROR_MISSING_SUBJECT = LASSO_PROFILE_ERROR_MISSING_SUBJECT;

	const LASSO_PROFILE_ERROR_MISSING_NAME_IDENTIFIER = LASSO_PROFILE_ERROR_MISSING_NAME_IDENTIFIER;

	const LASSO_PROFILE_ERROR_INVALID_ARTIFACT = LASSO_PROFILE_ERROR_INVALID_ARTIFACT;

	const LASSO_PROFILE_ERROR_MISSING_ENCRYPTION_PRIVATE_KEY = LASSO_PROFILE_ERROR_MISSING_ENCRYPTION_PRIVATE_KEY;

	const LASSO_PROFILE_ERROR_STATUS_NOT_SUCCESS = LASSO_PROFILE_ERROR_STATUS_NOT_SUCCESS;

	const LASSO_PROFILE_ERROR_MISSING_ISSUER = LASSO_PROFILE_ERROR_MISSING_ISSUER;

	const LASSO_PROFILE_ERROR_MISSING_SERVICE_INSTANCE = LASSO_PROFILE_ERROR_MISSING_SERVICE_INSTANCE;

	const LASSO_PROFILE_ERROR_MISSING_ENDPOINT_REFERENCE = LASSO_PROFILE_ERROR_MISSING_ENDPOINT_REFERENCE;

	const LASSO_PROFILE_ERROR_MISSING_ENDPOINT_REFERENCE_ADDRESS = LASSO_PROFILE_ERROR_MISSING_ENDPOINT_REFERENCE_ADDRESS;

	const LASSO_PARAM_ERROR_BAD_TYPE_OR_NULL_OBJ = LASSO_PARAM_ERROR_BAD_TYPE_OR_NULL_OBJ;

	const LASSO_PARAM_ERROR_INVALID_VALUE = LASSO_PARAM_ERROR_INVALID_VALUE;

	const LASSO_PARAM_ERROR_CHECK_FAILED = LASSO_PARAM_ERROR_CHECK_FAILED;

	const LASSO_LOGIN_ERROR_FEDERATION_NOT_FOUND = LASSO_LOGIN_ERROR_FEDERATION_NOT_FOUND;

	const LASSO_LOGIN_ERROR_CONSENT_NOT_OBTAINED = LASSO_LOGIN_ERROR_CONSENT_NOT_OBTAINED;

	const LASSO_LOGIN_ERROR_INVALID_NAMEIDPOLICY = LASSO_LOGIN_ERROR_INVALID_NAMEIDPOLICY;

	const LASSO_LOGIN_ERROR_REQUEST_DENIED = LASSO_LOGIN_ERROR_REQUEST_DENIED;

	const LASSO_LOGIN_ERROR_INVALID_SIGNATURE = LASSO_LOGIN_ERROR_INVALID_SIGNATURE;

	const LASSO_LOGIN_ERROR_UNSIGNED_AUTHN_REQUEST = LASSO_LOGIN_ERROR_UNSIGNED_AUTHN_REQUEST;

	const LASSO_LOGIN_ERROR_STATUS_NOT_SUCCESS = LASSO_LOGIN_ERROR_STATUS_NOT_SUCCESS;

	const LASSO_LOGIN_ERROR_UNKNOWN_PRINCIPAL = LASSO_LOGIN_ERROR_UNKNOWN_PRINCIPAL;

	const LASSO_LOGIN_ERROR_NO_DEFAULT_ENDPOINT = LASSO_LOGIN_ERROR_NO_DEFAULT_ENDPOINT;

	const LASSO_LOGIN_ERROR_ASSERTION_REPLAY = LASSO_LOGIN_ERROR_ASSERTION_REPLAY;

	const LASSO_DEFEDERATION_ERROR_MISSING_NAME_IDENTIFIER = LASSO_DEFEDERATION_ERROR_MISSING_NAME_IDENTIFIER;

	const LASSO_SOAP_FAULT_REDIRECT_REQUEST = LASSO_SOAP_FAULT_REDIRECT_REQUEST;

	const LASSO_SOAP_ERROR_MISSING_ENVELOPE = LASSO_SOAP_ERROR_MISSING_ENVELOPE;

	const LASSO_SOAP_ERROR_MISSING_HEADER = LASSO_SOAP_ERROR_MISSING_HEADER;

	const LASSO_SOAP_ERROR_MISSING_BODY = LASSO_SOAP_ERROR_MISSING_BODY;

	const LASSO_SOAP_ERROR_MISSING_SOAP_FAULT_DETAIL = LASSO_SOAP_ERROR_MISSING_SOAP_FAULT_DETAIL;

	const LASSO_NAME_IDENTIFIER_MAPPING_ERROR_MISSING_TARGET_NAMESPACE = LASSO_NAME_IDENTIFIER_MAPPING_ERROR_MISSING_TARGET_NAMESPACE;

	const LASSO_NAME_IDENTIFIER_MAPPING_ERROR_FORBIDDEN_CALL_ON_THIS_SIDE = LASSO_NAME_IDENTIFIER_MAPPING_ERROR_FORBIDDEN_CALL_ON_THIS_SIDE;

	const LASSO_NAME_IDENTIFIER_MAPPING_ERROR_MISSING_TARGET_IDENTIFIER = LASSO_NAME_IDENTIFIER_MAPPING_ERROR_MISSING_TARGET_IDENTIFIER;

	const LASSO_DATA_SERVICE_ERROR_UNREGISTERED_DST = LASSO_DATA_SERVICE_ERROR_UNREGISTERED_DST;

	const LASSO_WSF_PROFILE_ERROR_MISSING_CORRELATION = LASSO_WSF_PROFILE_ERROR_MISSING_CORRELATION;

	const LASSO_WSF_PROFILE_ERROR_MISSING_SECURITY = LASSO_WSF_PROFILE_ERROR_MISSING_SECURITY;

	const LASSO_DISCOVERY_ERROR_SVC_METADATA_REGISTER_FAILED = LASSO_DISCOVERY_ERROR_SVC_METADATA_REGISTER_FAILED;

	const LASSO_DISCOVERY_ERROR_SVC_METADATA_ASSOCIATION_ADD_FAILED = LASSO_DISCOVERY_ERROR_SVC_METADATA_ASSOCIATION_ADD_FAILED;

	const LASSO_DISCOVERY_ERROR_MISSING_REQUESTED_SERVICE = LASSO_DISCOVERY_ERROR_MISSING_REQUESTED_SERVICE;

	const LASSO_DISCOVERY_ERROR_FAILED_TO_BUILD_ENDPOINT_REFERENCE = LASSO_DISCOVERY_ERROR_FAILED_TO_BUILD_ENDPOINT_REFERENCE;

	const LASSO_DST_ERROR_MISSING_SERVICE_DATA = LASSO_DST_ERROR_MISSING_SERVICE_DATA;

	const LASSO_DST_ERROR_QUERY_FAILED = LASSO_DST_ERROR_QUERY_FAILED;

	const LASSO_DST_ERROR_QUERY_PARTIALLY_FAILED = LASSO_DST_ERROR_QUERY_PARTIALLY_FAILED;

	const LASSO_DST_ERROR_MODIFY_FAILED = LASSO_DST_ERROR_MODIFY_FAILED;

	const LASSO_DST_ERROR_MODIFY_PARTIALLY_FAILED = LASSO_DST_ERROR_MODIFY_PARTIALLY_FAILED;

	const LASSO_DST_ERROR_NEW_DATA_MISSING = LASSO_DST_ERROR_NEW_DATA_MISSING;

	static function lasso_init() {
		return lasso_init();
	}

	static function lasso_shutdown() {
		return lasso_shutdown();
	}

	const LASSO_CHECK_VERSION_EXACT = LASSO_CHECK_VERSION_EXACT;

	const LASSO_CHECK_VERSIONABI_COMPATIBLE = LASSO_CHECK_VERSIONABI_COMPATIBLE;

	const LASSO_CHECK_VERSION_NUMERIC = LASSO_CHECK_VERSION_NUMERIC;

	static function lasso_check_version($major,$minor,$subminor,$mode=null) {
		switch (func_num_args()) {
		case 3: $r=lasso_check_version($major,$minor,$subminor); break;
		default: $r=lasso_check_version($major,$minor,$subminor,$mode);
		}
		return $r;
	}

	static function lasso_register_dst_service($prefix,$href) {
		lasso_register_dst_service($prefix,$href);
	}

	static function lasso_register_idwsf2_dst_service($prefix,$href) {
		lasso_register_idwsf2_dst_service($prefix,$href);
	}

	static function lasso_getRequestTypeFromSoapMsg($soap) {
		return lasso_getRequestTypeFromSoapMsg($soap);
	}

	static function lasso_isLibertyQuery($query) {
		return lasso_isLibertyQuery($query);
	}

	const LASSO_SAML2_SUPPORT = LASSO_SAML2_SUPPORT;

	static function lasso_isSamlQuery($query) {
		return lasso_isSamlQuery($query);
	}

	const LASSO_SAML2_NAME_IDENTIFIER_FORMAT_PERSISTENT = LASSO_SAML2_NAME_IDENTIFIER_FORMAT_PERSISTENT;

	const LASSO_SAML2_NAME_IDENTIFIER_FORMAT_TRANSIENT = LASSO_SAML2_NAME_IDENTIFIER_FORMAT_TRANSIENT;

	const LASSO_SAML2_NAME_IDENTIFIER_FORMAT_ENCRYPTED = LASSO_SAML2_NAME_IDENTIFIER_FORMAT_ENCRYPTED;

	const LASSO_SAML2_METADATA_BINDING_SOAP = LASSO_SAML2_METADATA_BINDING_SOAP;

	const LASSO_SAML2_METADATA_BINDING_REDIRECT = LASSO_SAML2_METADATA_BINDING_REDIRECT;

	const LASSO_SAML2_METADATA_BINDING_POST = LASSO_SAML2_METADATA_BINDING_POST;

	const LASSO_SAML2_METADATA_BINDING_ARTIFACT = LASSO_SAML2_METADATA_BINDING_ARTIFACT;

	const LASSO_SAML2_METADATA_BINDING_PAOS = LASSO_SAML2_METADATA_BINDING_PAOS;

	const LASSO_SAML2_AUTHN_CONTEXT_AUTHENTICATED_TELEPHONY = LASSO_SAML2_AUTHN_CONTEXT_AUTHENTICATED_TELEPHONY;

	const LASSO_SAML2_AUTHN_CONTEXT_INTERNET_PROTOCOL = LASSO_SAML2_AUTHN_CONTEXT_INTERNET_PROTOCOL;

	const LASSO_SAML2_AUTHN_CONTEXT_INTERNET_PROTOCOL_PASSWORD = LASSO_SAML2_AUTHN_CONTEXT_INTERNET_PROTOCOL_PASSWORD;

	const LASSO_SAML2_AUTHN_CONTEXT_KERBEROS = LASSO_SAML2_AUTHN_CONTEXT_KERBEROS;

	const LASSO_SAML2_AUTHN_CONTEXT_MOBILE_ONE_FACTOR_CONTRACT = LASSO_SAML2_AUTHN_CONTEXT_MOBILE_ONE_FACTOR_CONTRACT;

	const LASSO_SAML2_AUTHN_CONTEXT_MOBILE_ONE_FACTOR_UNREGISTERED = LASSO_SAML2_AUTHN_CONTEXT_MOBILE_ONE_FACTOR_UNREGISTERED;

	const LASSO_SAML2_AUTHN_CONTEXT_MOBILE_TWO_FACTOR_CONTRACT = LASSO_SAML2_AUTHN_CONTEXT_MOBILE_TWO_FACTOR_CONTRACT;

	const LASSO_SAML2_AUTHN_CONTEXT_MOBILE_TWO_FACTOR_UNREGISTERED = LASSO_SAML2_AUTHN_CONTEXT_MOBILE_TWO_FACTOR_UNREGISTERED;

	const LASSO_SAML2_AUTHN_CONTEXT_NOMAD_TELEPHONY = LASSO_SAML2_AUTHN_CONTEXT_NOMAD_TELEPHONY;

	const LASSO_SAML2_AUTHN_CONTEXT_PERSONALIZED_TELEPHONY = LASSO_SAML2_AUTHN_CONTEXT_PERSONALIZED_TELEPHONY;

	const LASSO_SAML2_AUTHN_CONTEXT_PGP = LASSO_SAML2_AUTHN_CONTEXT_PGP;

	const LASSO_SAML2_AUTHN_CONTEXT_PASSWORD_PROTECTED_TRANSPORT = LASSO_SAML2_AUTHN_CONTEXT_PASSWORD_PROTECTED_TRANSPORT;

	const LASSO_SAML2_AUTHN_CONTEXT_PASSWORD = LASSO_SAML2_AUTHN_CONTEXT_PASSWORD;

	const LASSO_SAML2_AUTHN_CONTEXT_PREVIOUS_SESSION = LASSO_SAML2_AUTHN_CONTEXT_PREVIOUS_SESSION;

	const LASSO_SAML2_AUTHN_CONTEXT_SMARTCARD = LASSO_SAML2_AUTHN_CONTEXT_SMARTCARD;

	const LASSO_SAML2_AUTHN_CONTEXT_SMARTCARD_PKI = LASSO_SAML2_AUTHN_CONTEXT_SMARTCARD_PKI;

	const LASSO_SAML2_AUTHN_CONTEXT_SOFTWARE_PKI = LASSO_SAML2_AUTHN_CONTEXT_SOFTWARE_PKI;

	const LASSO_SAML2_AUTHN_CONTEXT_SPKI = LASSO_SAML2_AUTHN_CONTEXT_SPKI;

	const LASSO_SAML2_AUTHN_CONTEXT_SECURE_REMOTE_PASSWORD = LASSO_SAML2_AUTHN_CONTEXT_SECURE_REMOTE_PASSWORD;

	const LASSO_SAML2_AUTHN_CONTEXT_TLS_CLIENT = LASSO_SAML2_AUTHN_CONTEXT_TLS_CLIENT;

	const LASSO_SAML2_AUTHN_CONTEXT_X509 = LASSO_SAML2_AUTHN_CONTEXT_X509;

	const LASSO_SAML2_AUTHN_CONTEXT_TELEPHONY = LASSO_SAML2_AUTHN_CONTEXT_TELEPHONY;

	const LASSO_SAML2_AUTHN_CONTEXT_TIME_SYNC_TOKEN = LASSO_SAML2_AUTHN_CONTEXT_TIME_SYNC_TOKEN;

	const LASSO_SAML2_AUTHN_CONTEXT_XMLDSIG = LASSO_SAML2_AUTHN_CONTEXT_XMLDSIG;
}

/* PHP Proxy Classes */
class LassoNode {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoNode();
	}

	function __construct() {
		$this->_cPtr=LassoNode_dump($this->_cPtr);
	}
}

class LassoNodeList {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoNodeList();
	}

	function append($item) {
		LassoNodeList_append($this->_cPtr,$item);
	}

	function cast() {
		return LassoNodeList_cast($this->_cPtr);
	}

	static function frompointer($nodeArray) {
		$r=LassoNodeList_frompointer($nodeArray);
		return is_resource($r) ? new LassoNodeList($r) : $r;
	}

	function __construct($index) {
		$this->_cPtr=LassoNodeList_getItem($this->_cPtr,$index);
	}

	function length() {
		return LassoNodeList_length($this->_cPtr);
	}

	function setItem($index,$item) {
		LassoNodeList_setItem($this->_cPtr,$index,$item);
	}
}

class LassoStringList {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoStringList();
	}

	function append($item) {
		LassoStringList_append($this->_cPtr,$item);
	}

	function cast() {
		return LassoStringList_cast($this->_cPtr);
	}

	static function frompointer($stringArray) {
		$r=LassoStringList_frompointer($stringArray);
		return is_resource($r) ? new LassoStringList($r) : $r;
	}

	function getItem($index) {
		return LassoStringList_getItem($this->_cPtr,$index);
	}

	function length() {
		return LassoStringList_length($this->_cPtr);
	}

	function setItem($index,$item) {
		LassoStringList_setItem($this->_cPtr,$index,$item);
	}
}

class LassoStringDict {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoStringDict();
	}

	function cast() {
		return LassoStringDict_cast($this->_cPtr);
	}

	static function frompointer($stringDict) {
		$r=LassoStringDict_frompointer($stringDict);
		return is_resource($r) ? new LassoStringDict($r) : $r;
	}

	function getItem($key) {
		return LassoStringDict_getItem($this->_cPtr,$key);
	}

	function setItem($key,$item) {
		LassoStringDict_setItem($this->_cPtr,$key,$item);
	}
}

class LassoMiscTextNode {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoMiscTextNode_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoMiscTextNode_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoMiscTextNode();
	}

	function __construct() {
		$this->_cPtr=LassoMiscTextNode_dump($this->_cPtr);
	}
}

class LassoSamlAdvice {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'Assertion') return LassoSamlAdvice_Assertion_set($this->_cPtr,$value);
		if ($var == 'assertionIdReference') return LassoSamlAdvice_assertionIdReference_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'Assertion') return LassoSamlAdvice_Assertion_get($this->_cPtr);
		if ($var == 'assertionIdReference') return LassoSamlAdvice_assertionIdReference_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlAdvice();
	}

	function __construct() {
		$this->_cPtr=LassoSamlAdvice_dump($this->_cPtr);
	}
}

class LassoSamlAssertion {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlAssertion_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlAssertion_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlAssertion();
	}

	function __construct() {
		$this->_cPtr=LassoSamlAssertion_dump($this->_cPtr);
	}
}

class LassoSamlAttribute {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlAttribute_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlAttribute_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlAttribute();
	}

	function __construct() {
		$this->_cPtr=LassoSamlAttribute_dump($this->_cPtr);
	}
}

class LassoSamlAttributeDesignator {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'AttributeName') return LassoSamlAttributeDesignator_AttributeName_set($this->_cPtr,$value);
		if ($var == 'AttributeNamespace') return LassoSamlAttributeDesignator_AttributeNamespace_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'AttributeName') return LassoSamlAttributeDesignator_AttributeName_get($this->_cPtr);
		if ($var == 'AttributeNamespace') return LassoSamlAttributeDesignator_AttributeNamespace_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlAttributeDesignator();
	}

	function __construct() {
		$this->_cPtr=LassoSamlAttributeDesignator_dump($this->_cPtr);
	}
}

class LassoSamlAttributeStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'Subject') return LassoSamlAttributeStatement_Subject_set($this->_cPtr,$value);
		if ($var == 'Attribute') return LassoSamlAttributeStatement_Attribute_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'Subject') return LassoSamlAttributeStatement_Subject_get($this->_cPtr);
		if ($var == 'Attribute') return LassoSamlAttributeStatement_Attribute_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlAttributeStatement();
	}

	function __construct() {
		$this->_cPtr=LassoSamlAttributeStatement_dump($this->_cPtr);
	}
}

class LassoSamlAttributeValue {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'any') return LassoSamlAttributeValue_any_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'any') return LassoSamlAttributeValue_any_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlAttributeValue();
	}

	function __construct() {
		$this->_cPtr=LassoSamlAttributeValue_dump($this->_cPtr);
	}
}

class LassoSamlAudienceRestrictionCondition {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'audience') return LassoSamlAudienceRestrictionCondition_audience_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'audience') return LassoSamlAudienceRestrictionCondition_audience_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlAudienceRestrictionCondition();
	}

	function __construct() {
		$this->_cPtr=LassoSamlAudienceRestrictionCondition_dump($this->_cPtr);
	}
}

class LassoSamlAuthenticationStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlAuthenticationStatement_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlAuthenticationStatement_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlAuthenticationStatement();
	}

	function __construct() {
		$this->_cPtr=LassoSamlAuthenticationStatement_dump($this->_cPtr);
	}
}

class LassoSamlAuthorityBinding {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlAuthorityBinding_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlAuthorityBinding_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlAuthorityBinding();
	}

	function __construct() {
		$this->_cPtr=LassoSamlAuthorityBinding_dump($this->_cPtr);
	}
}

class LassoSamlConditionAbstract {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=LassoSamlConditionAbstract_dump($this->_cPtr);
	}
}

class LassoSamlConditions {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlConditions_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlConditions_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlConditions();
	}

	function __construct() {
		$this->_cPtr=LassoSamlConditions_dump($this->_cPtr);
	}
}

class LassoSamlNameIdentifier {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlNameIdentifier_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlNameIdentifier_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlNameIdentifier();
	}

	function __construct() {
		$this->_cPtr=LassoSamlNameIdentifier_dump($this->_cPtr);
	}
}

class LassoSamlStatementAbstract {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=LassoSamlStatementAbstract_dump($this->_cPtr);
	}
}

class LassoSamlSubject {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'SubjectConfirmation') return LassoSamlSubject_SubjectConfirmation_set($this->_cPtr,$value);
		if ($var == 'NameIdentifier') return LassoSamlSubject_NameIdentifier_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'SubjectConfirmation') return LassoSamlSubject_SubjectConfirmation_get($this->_cPtr);
		if ($var == 'NameIdentifier') return LassoSamlSubject_NameIdentifier_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlSubject();
	}

	function __construct() {
		$this->_cPtr=LassoSamlSubject_dump($this->_cPtr);
	}
}

class LassoSamlSubjectConfirmation {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'confirmationMethod') return LassoSamlSubjectConfirmation_confirmationMethod_set($this->_cPtr,$value);
		if ($var == 'SubjectConfirmationData') return LassoSamlSubjectConfirmation_SubjectConfirmationData_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'confirmationMethod') return LassoSamlSubjectConfirmation_confirmationMethod_get($this->_cPtr);
		if ($var == 'SubjectConfirmationData') return LassoSamlSubjectConfirmation_SubjectConfirmationData_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlSubjectConfirmation();
	}

	function __construct() {
		$this->_cPtr=LassoSamlSubjectConfirmation_dump($this->_cPtr);
	}
}

class LassoSamlSubjectLocality {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'DNSAddress') return LassoSamlSubjectLocality_DNSAddress_set($this->_cPtr,$value);
		if ($var == 'IPAddress') return LassoSamlSubjectLocality_IPAddress_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'DNSAddress') return LassoSamlSubjectLocality_DNSAddress_get($this->_cPtr);
		if ($var == 'IPAddress') return LassoSamlSubjectLocality_IPAddress_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlSubjectLocality();
	}

	function __construct() {
		$this->_cPtr=LassoSamlSubjectLocality_dump($this->_cPtr);
	}
}

class LassoSamlSubjectStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'Subject') return LassoSamlSubjectStatement_Subject_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'Subject') return LassoSamlSubjectStatement_Subject_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlSubjectStatement();
	}

	function __construct() {
		$this->_cPtr=LassoSamlSubjectStatement_dump($this->_cPtr);
	}
}

class LassoSamlSubjectStatementAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'Subject') return LassoSamlSubjectStatementAbstract_Subject_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'Subject') return LassoSamlSubjectStatementAbstract_Subject_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=LassoSamlSubjectStatementAbstract_dump($this->_cPtr);
	}
}

class LassoSamlpRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlpRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlpRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlpRequest();
	}

	function __construct() {
		$this->_cPtr=LassoSamlpRequest_dump($this->_cPtr);
	}
}

class LassoSamlpRequestAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlpRequestAbstract_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlpRequestAbstract_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=LassoSamlpRequestAbstract_dump($this->_cPtr);
	}
}

class LassoSamlpResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlpResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlpResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlpResponse();
	}

	function __construct() {
		$this->_cPtr=LassoSamlpResponse_dump($this->_cPtr);
	}
}

class LassoSamlpResponseAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlpResponseAbstract_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlpResponseAbstract_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=LassoSamlpResponseAbstract_dump($this->_cPtr);
	}
}

class LassoSamlpStatus {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'StatusMessage') return LassoSamlpStatus_StatusMessage_set($this->_cPtr,$value);
		if ($var == 'StatusCode') return LassoSamlpStatus_StatusCode_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'StatusMessage') return LassoSamlpStatus_StatusMessage_get($this->_cPtr);
		if ($var == 'StatusCode') return LassoSamlpStatus_StatusCode_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlpStatus();
	}

	function __construct() {
		$this->_cPtr=LassoSamlpStatus_dump($this->_cPtr);
	}
}

class LassoSamlpStatusCode {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'Value') return LassoSamlpStatusCode_Value_set($this->_cPtr,$value);
		if ($var == 'StatusCode') return LassoSamlpStatusCode_StatusCode_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'Value') return LassoSamlpStatusCode_Value_get($this->_cPtr);
		if ($var == 'StatusCode') return LassoSamlpStatusCode_StatusCode_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlpStatusCode();
	}

	function __construct() {
		$this->_cPtr=LassoSamlpStatusCode_dump($this->_cPtr);
	}
}

class LassoLibAssertion {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLibAssertion_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLibAssertion_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoLibAssertion();
	}

	function __construct($issuer,$requestId,$audience,$notBefore,$notOnOrAfter) {
		$this->_cPtr=LassoLibAssertion_newFull($issuer,$requestId,$audience,$notBefore,$notOnOrAfter);
	}

	function __construct() {
		$this->_cPtr=LassoLibAssertion_dump($this->_cPtr);
	}
}

class LassoLibAuthnRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLibAuthnRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLibAuthnRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoLibAuthnRequest();
	}

	function __construct() {
		$this->_cPtr=LassoLibAuthnRequest_dump($this->_cPtr);
	}
}

class LassoLibAuthnResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLibAuthnResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLibAuthnResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($providerID,$request) {
		$this->_cPtr=new_LassoLibAuthnResponse($providerID,$request);
	}

	function __construct() {
		$this->_cPtr=LassoLibAuthnResponse_dump($this->_cPtr);
	}
}

class LassoLibFederationTerminationNotification {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLibFederationTerminationNotification_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLibFederationTerminationNotification_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoLibFederationTerminationNotification();
	}

	function __construct($providerID,$nameIdentifier,$sign_type,$sign_method) {
		$this->_cPtr=LassoLibFederationTerminationNotification_newFull($providerID,$nameIdentifier,$sign_type,$sign_method);
	}

	function __construct() {
		$this->_cPtr=LassoLibFederationTerminationNotification_dump($this->_cPtr);
	}
}

class LassoLibLogoutRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLibLogoutRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLibLogoutRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoLibLogoutRequest();
	}

	function __construct($providerID,$nameIdentifier,$sign_type,$sign_method) {
		$this->_cPtr=LassoLibLogoutRequest_newFull($providerID,$nameIdentifier,$sign_type,$sign_method);
	}

	function __construct() {
		$this->_cPtr=LassoLibLogoutRequest_dump($this->_cPtr);
	}
}

class LassoLibLogoutResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLibLogoutResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLibLogoutResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoLibLogoutResponse();
	}

	function __construct($providerID,$statusCodeValue,$request,$sign_type,$sign_method) {
		$this->_cPtr=LassoLibLogoutResponse_newFull($providerID,$statusCodeValue,$request,$sign_type,$sign_method);
	}

	function __construct() {
		$this->_cPtr=LassoLibLogoutResponse_dump($this->_cPtr);
	}
}

class LassoLibRegisterNameIdentifierRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLibRegisterNameIdentifierRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLibRegisterNameIdentifierRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoLibRegisterNameIdentifierRequest();
	}

	function __construct($providerID,$idpNameIdentifier,$spNameIdentifier,$oldNameIdentifier,$sign_type,$sign_method) {
		$this->_cPtr=LassoLibRegisterNameIdentifierRequest_newFull($providerID,$idpNameIdentifier,$spNameIdentifier,$oldNameIdentifier,$sign_type,$sign_method);
	}

	function __construct() {
		$this->_cPtr=LassoLibRegisterNameIdentifierRequest_dump($this->_cPtr);
	}
}

class LassoLibRegisterNameIdentifierResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLibRegisterNameIdentifierResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLibRegisterNameIdentifierResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoLibRegisterNameIdentifierResponse();
	}

	function __construct($providerID,$statusCodeValue,$request,$sign_type,$sign_method) {
		$this->_cPtr=LassoLibRegisterNameIdentifierResponse_newFull($providerID,$statusCodeValue,$request,$sign_type,$sign_method);
	}

	function __construct() {
		$this->_cPtr=LassoLibRegisterNameIdentifierResponse_dump($this->_cPtr);
	}
}

class LassoLibRequestAuthnContext {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLibRequestAuthnContext_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLibRequestAuthnContext_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoLibRequestAuthnContext();
	}

	function __construct() {
		$this->_cPtr=LassoLibRequestAuthnContext_dump($this->_cPtr);
	}
}

class LassoLibStatusResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLibStatusResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLibStatusResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoLibStatusResponse();
	}

	function __construct() {
		$this->_cPtr=LassoLibStatusResponse_dump($this->_cPtr);
	}
}

class LassoProvider {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoProvider_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoProvider_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($role,$metadata,$public_key,$ca_cert_chain) {
		$this->_cPtr=new_LassoProvider($role,$metadata,$public_key,$ca_cert_chain);
	}

	function __construct($dump) {
		$this->_cPtr=LassoProvider_newFromDump($dump);
	}

	function __construct() {
		$this->_cPtr=LassoProvider_dump($this->_cPtr);
	}

	function acceptHttpMethod($remote_provider,$protocol_type,$http_method,$initiate_profile) {
		return LassoProvider_acceptHttpMethod($this->_cPtr,$remote_provider,$protocol_type,$http_method,$initiate_profile);
	}

	function __construct($service_id) {
		$this->_cPtr=LassoProvider_getAssertionConsumerServiceUrl($this->_cPtr,$service_id);
	}

	function __construct() {
		$this->_cPtr=LassoProvider_getBase64SuccinctId($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=LassoProvider_getOrganization($this->_cPtr);
	}

	function getFirstHttpMethod($remote_provider,$protocol_type) {
		return LassoProvider_getFirstHttpMethod($this->_cPtr,$remote_provider,$protocol_type);
	}

	function __construct($name) {
		$this->_cPtr=LassoProvider_getMetadataOne($this->_cPtr,$name);
	}

	function hasProtocolProfile($protocol_type,$protocol_profile) {
		return LassoProvider_hasProtocolProfile($this->_cPtr,$protocol_type,$protocol_profile);
	}

	function getProtocolConformance() {
		return LassoProvider_getProtocolConformance($this->_cPtr);
	}

	function __construct($encryption_mode) {
		$this->_cPtr=LassoProvider_setEncryptionMode($this->_cPtr,$encryption_mode);
	}

	function __construct($encryption_sym_key_type) {
		$this->_cPtr=LassoProvider_setEncryptionSymKeyType($this->_cPtr,$encryption_sym_key_type);
	}
}

class LassoServer {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoServer_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoServer_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($metadata=null,$privateKey=null,$privateKeyPassword=null,$certificate=null) {
		switch (func_num_args()) {
		case 0: $r=new_LassoServer(); break;
		case 1: $r=new_LassoServer($metadata); break;
		case 2: $r=new_LassoServer($metadata,$privateKey); break;
		case 3: $r=new_LassoServer($metadata,$privateKey,$privateKeyPassword); break;
		default: $r=new_LassoServer($metadata,$privateKey,$privateKeyPassword,$certificate);
		}
		$this->_cPtr=$r;
	}

	function __construct($dump) {
		$this->_cPtr=LassoServer_newFromDump($dump);
	}

	function acceptHttpMethod($remote_provider,$protocol_type,$http_method,$initiate_profile) {
		return LassoServer_acceptHttpMethod($this->_cPtr,$remote_provider,$protocol_type,$http_method,$initiate_profile);
	}

	function __construct($service_id) {
		$this->_cPtr=LassoServer_getAssertionConsumerServiceUrl($this->_cPtr,$service_id);
	}

	function __construct() {
		$this->_cPtr=LassoServer_getBase64SuccinctId($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=LassoServer_getOrganization($this->_cPtr);
	}

	function getFirstHttpMethod($remote_provider,$protocol_type) {
		return LassoServer_getFirstHttpMethod($this->_cPtr,$remote_provider,$protocol_type);
	}

	function __construct($name) {
		$this->_cPtr=LassoServer_getMetadataOne($this->_cPtr,$name);
	}

	function hasProtocolProfile($protocol_type,$protocol_profile) {
		return LassoServer_hasProtocolProfile($this->_cPtr,$protocol_type,$protocol_profile);
	}

	function getProtocolConformance() {
		return LassoServer_getProtocolConformance($this->_cPtr);
	}

	function addProvider($role,$metadata,$publicKey=null,$caCertChain=null) {
		switch (func_num_args()) {
		case 2: $r=LassoServer_addProvider($this->_cPtr,$role,$metadata); break;
		case 3: $r=LassoServer_addProvider($this->_cPtr,$role,$metadata,$publicKey); break;
		default: $r=LassoServer_addProvider($this->_cPtr,$role,$metadata,$publicKey,$caCertChain);
		}
		return $r;
	}

	function setEncryptionPrivateKey($filename) {
		return LassoServer_setEncryptionPrivateKey($this->_cPtr,$filename);
	}

	function loadAffiliation($filename) {
		return LassoServer_loadAffiliation($this->_cPtr,$filename);
	}

	function __construct() {
		$this->_cPtr=LassoServer_dump($this->_cPtr);
	}

	function getProvider($providerId) {
		$r=LassoServer_getProvider($this->_cPtr,$providerId);
		return is_resource($r) ? new LassoProvider($r) : $r;
	}
}

class LassoFederation {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoFederation_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoFederation_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($remoteProviderId) {
		$this->_cPtr=new_LassoFederation($remoteProviderId);
	}

	function __construct() {
		$this->_cPtr=LassoFederation_dump($this->_cPtr);
	}

	function buildLocalNameIdentifier($nameQualifier,$format,$content) {
		LassoFederation_buildLocalNameIdentifier($this->_cPtr,$nameQualifier,$format,$content);
	}

	function verifyNameIdentifier($nameIdentifier) {
		return LassoFederation_verifyNameIdentifier($this->_cPtr,$nameIdentifier);
	}
}

class LassoIdentity {
	public $_cPtr=null;

	function __get($var) {
		if ($var == 'is_dirty') return LassoIdentity_is_dirty_get($this->_cPtr);
		if ($var == 'providerIds') return LassoIdentity_providerIds_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoIdentity();
	}

	function __construct($dump) {
		$this->_cPtr=LassoIdentity_newFromDump($dump);
	}

	function __construct() {
		$this->_cPtr=LassoIdentity_dump($this->_cPtr);
	}

	function getFederation($providerId) {
		$r=LassoIdentity_getFederation($this->_cPtr,$providerId);
		return is_resource($r) ? new LassoFederation($r) : $r;
	}
}

class LassoSession {
	public $_cPtr=null;

	function __get($var) {
		if ($var == 'is_dirty') return LassoSession_is_dirty_get($this->_cPtr);
		if ($var == 'providerIds') return LassoSession_providerIds_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSession();
	}

	function __construct($dump) {
		$this->_cPtr=LassoSession_newFromDump($dump);
	}

	function __construct() {
		$this->_cPtr=LassoSession_dump($this->_cPtr);
	}

	function __construct($providerId) {
		$this->_cPtr=LassoSession_getAssertions($this->_cPtr,$providerId);
	}
}

class LassoDefederation {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoDefederation_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoDefederation_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_LassoDefederation($server);
	}

	function setIdentityFromDump($dump) {
		return LassoDefederation_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return LassoDefederation_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildNotificationMsg() {
		return LassoDefederation_buildNotificationMsg($this->_cPtr);
	}

	function initNotification($remoteProviderId=null,$httpMethod=null) {
		switch (func_num_args()) {
		case 0: $r=LassoDefederation_initNotification($this->_cPtr); break;
		case 1: $r=LassoDefederation_initNotification($this->_cPtr,$remoteProviderId); break;
		default: $r=LassoDefederation_initNotification($this->_cPtr,$remoteProviderId,$httpMethod);
		}
		return $r;
	}

	function processNotificationMsg($notificationMsg) {
		return LassoDefederation_processNotificationMsg($this->_cPtr,$notificationMsg);
	}

	function validateNotification() {
		return LassoDefederation_validateNotification($this->_cPtr);
	}
}

class LassoLogin {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLogin_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLogin_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_LassoLogin($server);
	}

	function __construct($server,$dump) {
		$this->_cPtr=LassoLogin_newFromDump($server,$dump);
	}

	function setIdentityFromDump($dump) {
		return LassoLogin_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return LassoLogin_setSessionFromDump($this->_cPtr,$dump);
	}

	function acceptSso() {
		return LassoLogin_acceptSso($this->_cPtr);
	}

	function buildArtifactMsg($httpMethod) {
		return LassoLogin_buildArtifactMsg($this->_cPtr,$httpMethod);
	}

	function buildAssertion($authenticationMethod,$authenticationInstant,$reauthenticateOnOrAfter,$notBefore,$notOnOrAfter) {
		return LassoLogin_buildAssertion($this->_cPtr,$authenticationMethod,$authenticationInstant,$reauthenticateOnOrAfter,$notBefore,$notOnOrAfter);
	}

	function buildAuthnRequestMsg() {
		return LassoLogin_buildAuthnRequestMsg($this->_cPtr);
	}

	function buildAuthnResponseMsg() {
		return LassoLogin_buildAuthnResponseMsg($this->_cPtr);
	}

	function buildRequestMsg() {
		return LassoLogin_buildRequestMsg($this->_cPtr);
	}

	function buildResponseMsg($remoteProviderId) {
		return LassoLogin_buildResponseMsg($this->_cPtr,$remoteProviderId);
	}

	function __construct() {
		$this->_cPtr=LassoLogin_dump($this->_cPtr);
	}

	function initAuthnRequest($remoteProviderId=null,$httpMethod=null) {
		switch (func_num_args()) {
		case 0: $r=LassoLogin_initAuthnRequest($this->_cPtr); break;
		case 1: $r=LassoLogin_initAuthnRequest($this->_cPtr,$remoteProviderId); break;
		default: $r=LassoLogin_initAuthnRequest($this->_cPtr,$remoteProviderId,$httpMethod);
		}
		return $r;
	}

	function initRequest($responseMsg,$httpMethod=null) {
		switch (func_num_args()) {
		case 1: $r=LassoLogin_initRequest($this->_cPtr,$responseMsg); break;
		default: $r=LassoLogin_initRequest($this->_cPtr,$responseMsg,$httpMethod);
		}
		return $r;
	}

	function initIdpInitiatedAuthnRequest($remoteProviderID=null) {
		switch (func_num_args()) {
		case 0: $r=LassoLogin_initIdpInitiatedAuthnRequest($this->_cPtr); break;
		default: $r=LassoLogin_initIdpInitiatedAuthnRequest($this->_cPtr,$remoteProviderID);
		}
		return $r;
	}

	function mustAskForConsent() {
		return LassoLogin_mustAskForConsent($this->_cPtr);
	}

	function mustAuthenticate() {
		return LassoLogin_mustAuthenticate($this->_cPtr);
	}

	function processAuthnRequestMsg($authnrequestMsg) {
		return LassoLogin_processAuthnRequestMsg($this->_cPtr,$authnrequestMsg);
	}

	function processAuthnResponseMsg($authnResponseMsg) {
		return LassoLogin_processAuthnResponseMsg($this->_cPtr,$authnResponseMsg);
	}

	function processRequestMsg($requestMsg) {
		return LassoLogin_processRequestMsg($this->_cPtr,$requestMsg);
	}

	function processResponseMsg($responseMsg) {
		return LassoLogin_processResponseMsg($this->_cPtr,$responseMsg);
	}

	function setResourceId($content) {
		return LassoLogin_setResourceId($this->_cPtr,$content);
	}

	function validateRequestMsg($authenticationResult,$isConsentObtained) {
		return LassoLogin_validateRequestMsg($this->_cPtr,$authenticationResult,$isConsentObtained);
	}

	function processPaosResponseMsg($msg) {
		return LassoLogin_processPaosResponseMsg($this->_cPtr,$msg);
	}
}

class LassoLogout {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLogout_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLogout_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_LassoLogout($server);
	}

	function __construct($server,$dump) {
		$this->_cPtr=LassoLogout_newFromDump($server,$dump);
	}

	function setIdentityFromDump($dump) {
		return LassoLogout_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return LassoLogout_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildRequestMsg() {
		return LassoLogout_buildRequestMsg($this->_cPtr);
	}

	function buildResponseMsg() {
		return LassoLogout_buildResponseMsg($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=LassoLogout_dump($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=LassoLogout_getNextProviderId($this->_cPtr);
	}

	function initRequest($remoteProviderId=null,$httpMethod=null) {
		switch (func_num_args()) {
		case 0: $r=LassoLogout_initRequest($this->_cPtr); break;
		case 1: $r=LassoLogout_initRequest($this->_cPtr,$remoteProviderId); break;
		default: $r=LassoLogout_initRequest($this->_cPtr,$remoteProviderId,$httpMethod);
		}
		return $r;
	}

	function processRequestMsg($requestMsg) {
		return LassoLogout_processRequestMsg($this->_cPtr,$requestMsg);
	}

	function processResponseMsg($responseMsg) {
		return LassoLogout_processResponseMsg($this->_cPtr,$responseMsg);
	}

	function resetProviderIdIndex() {
		return LassoLogout_resetProviderIdIndex($this->_cPtr);
	}

	function validateRequest() {
		return LassoLogout_validateRequest($this->_cPtr);
	}
}

class LassoLecp {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoLecp_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoLecp_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_LassoLecp($server);
	}

	function setIdentityFromDump($dump) {
		return LassoLecp_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return LassoLecp_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildAssertion($authenticationMethod,$authenticationInstant,$reauthenticateOnOrAfter,$notBefore,$notOnOrAfter) {
		return LassoLecp_buildAssertion($this->_cPtr,$authenticationMethod,$authenticationInstant,$reauthenticateOnOrAfter,$notBefore,$notOnOrAfter);
	}

	function setResourceId($content) {
		return LassoLecp_setResourceId($this->_cPtr,$content);
	}

	function validateRequestMsg($authenticationResult,$isConsentObtained) {
		return LassoLecp_validateRequestMsg($this->_cPtr,$authenticationResult,$isConsentObtained);
	}

	function buildAuthnRequestEnvelopeMsg() {
		return LassoLecp_buildAuthnRequestEnvelopeMsg($this->_cPtr);
	}

	function buildAuthnRequestMsg() {
		return LassoLecp_buildAuthnRequestMsg($this->_cPtr);
	}

	function buildAuthnResponseEnvelopeMsg() {
		return LassoLecp_buildAuthnResponseEnvelopeMsg($this->_cPtr);
	}

	function buildAuthnResponseMsg() {
		return LassoLecp_buildAuthnResponseMsg($this->_cPtr);
	}

	function initAuthnRequest($remoteProviderId=null) {
		switch (func_num_args()) {
		case 0: $r=LassoLecp_initAuthnRequest($this->_cPtr); break;
		default: $r=LassoLecp_initAuthnRequest($this->_cPtr,$remoteProviderId);
		}
		return $r;
	}

	function processAuthnRequestEnvelopeMsg($requestMsg) {
		return LassoLecp_processAuthnRequestEnvelopeMsg($this->_cPtr,$requestMsg);
	}

	function processAuthnRequestMsg($authnRequestMsg) {
		return LassoLecp_processAuthnRequestMsg($this->_cPtr,$authnRequestMsg);
	}

	function processAuthnResponseEnvelopeMsg($responseMsg) {
		return LassoLecp_processAuthnResponseEnvelopeMsg($this->_cPtr,$responseMsg);
	}
}

class LassoNameIdentifierMapping {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoNameIdentifierMapping_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoNameIdentifierMapping_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_LassoNameIdentifierMapping($server);
	}

	function setIdentityFromDump($dump) {
		return LassoNameIdentifierMapping_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return LassoNameIdentifierMapping_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildRequestMsg() {
		return LassoNameIdentifierMapping_buildRequestMsg($this->_cPtr);
	}

	function buildResponseMsg() {
		return LassoNameIdentifierMapping_buildResponseMsg($this->_cPtr);
	}

	function initRequest($targetNamespace,$remoteProviderId=null) {
		switch (func_num_args()) {
		case 1: $r=LassoNameIdentifierMapping_initRequest($this->_cPtr,$targetNamespace); break;
		default: $r=LassoNameIdentifierMapping_initRequest($this->_cPtr,$targetNamespace,$remoteProviderId);
		}
		return $r;
	}

	function processRequestMsg($requestMsg) {
		return LassoNameIdentifierMapping_processRequestMsg($this->_cPtr,$requestMsg);
	}

	function processResponseMsg($responseMsg) {
		return LassoNameIdentifierMapping_processResponseMsg($this->_cPtr,$responseMsg);
	}

	function validateRequest() {
		return LassoNameIdentifierMapping_validateRequest($this->_cPtr);
	}
}

class LassoNameRegistration {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoNameRegistration_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoNameRegistration_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_LassoNameRegistration($server);
	}

	function __construct($server,$dump) {
		$this->_cPtr=LassoNameRegistration_newFromDump($server,$dump);
	}

	function setIdentityFromDump($dump) {
		return LassoNameRegistration_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return LassoNameRegistration_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildRequestMsg() {
		return LassoNameRegistration_buildRequestMsg($this->_cPtr);
	}

	function buildResponseMsg() {
		return LassoNameRegistration_buildResponseMsg($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=LassoNameRegistration_dump($this->_cPtr);
	}

	function initRequest($remoteProviderId,$httpMethod=null) {
		switch (func_num_args()) {
		case 1: $r=LassoNameRegistration_initRequest($this->_cPtr,$remoteProviderId); break;
		default: $r=LassoNameRegistration_initRequest($this->_cPtr,$remoteProviderId,$httpMethod);
		}
		return $r;
	}

	function processRequestMsg($requestMsg) {
		return LassoNameRegistration_processRequestMsg($this->_cPtr,$requestMsg);
	}

	function processResponseMsg($responseMsg) {
		return LassoNameRegistration_processResponseMsg($this->_cPtr,$responseMsg);
	}

	function validateRequest() {
		return LassoNameRegistration_validateRequest($this->_cPtr);
	}
}

class LassoNameIdManagement {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoNameIdManagement_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoNameIdManagement_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_LassoNameIdManagement($server);
	}

	function __construct($server,$dump) {
		$this->_cPtr=LassoNameIdManagement_newFromDump($server,$dump);
	}

	function setIdentityFromDump($dump) {
		return LassoNameIdManagement_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return LassoNameIdManagement_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildRequestMsg() {
		return LassoNameIdManagement_buildRequestMsg($this->_cPtr);
	}

	function buildResponseMsg() {
		return LassoNameIdManagement_buildResponseMsg($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=LassoNameIdManagement_dump($this->_cPtr);
	}

	function initRequest($remoteProviderId=null,$new_name_id=null,$httpMethod=null) {
		switch (func_num_args()) {
		case 0: $r=LassoNameIdManagement_initRequest($this->_cPtr); break;
		case 1: $r=LassoNameIdManagement_initRequest($this->_cPtr,$remoteProviderId); break;
		case 2: $r=LassoNameIdManagement_initRequest($this->_cPtr,$remoteProviderId,$new_name_id); break;
		default: $r=LassoNameIdManagement_initRequest($this->_cPtr,$remoteProviderId,$new_name_id,$httpMethod);
		}
		return $r;
	}

	function processRequestMsg($requestMsg) {
		return LassoNameIdManagement_processRequestMsg($this->_cPtr,$requestMsg);
	}

	function processResponseMsg($responseMsg) {
		return LassoNameIdManagement_processResponseMsg($this->_cPtr,$responseMsg);
	}

	function validateRequest() {
		return LassoNameIdManagement_validateRequest($this->_cPtr);
	}
}

class LassoEcp {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'request') return LassoEcp_request_set($this->_cPtr,$value);
		if ($var == 'response') return LassoEcp_response_set($this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoEcp_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_LassoEcp($server);
	}

	function processAuthnRequestMsg($authnRequestMsg) {
		return LassoEcp_processAuthnRequestMsg($this->_cPtr,$authnRequestMsg);
	}

	function processResponseMsg($responseMsg) {
		return LassoEcp_processResponseMsg($this->_cPtr,$responseMsg);
	}
}

class LassoSamlp2NameIDPolicy {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2NameIDPolicy_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2NameIDPolicy_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2NameIDPolicy();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2NameIDPolicy_dump($this->_cPtr);
	}
}

class LassoSamlp2RequestedAuthnContext {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2RequestedAuthnContext_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2RequestedAuthnContext_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2RequestedAuthnContext();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2RequestedAuthnContext_dump($this->_cPtr);
	}
}

class LassoSaml2Assertion {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2Assertion_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2Assertion_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2Assertion();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2Assertion_dump($this->_cPtr);
	}
}

class LassoSamlp2IDPList {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'IDPEntry') return LassoSamlp2IDPList_IDPEntry_set($this->_cPtr,$value);
		if ($var == 'GetComplete') return LassoSamlp2IDPList_GetComplete_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'IDPEntry') return LassoSamlp2IDPList_IDPEntry_get($this->_cPtr);
		if ($var == 'GetComplete') return LassoSamlp2IDPList_GetComplete_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2IDPList();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2IDPList_dump($this->_cPtr);
	}
}

class LassoSaml2KeyInfoConfirmationData {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoSaml2KeyInfoConfirmationData();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2KeyInfoConfirmationData_dump($this->_cPtr);
	}
}

class LassoSaml2Conditions {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2Conditions_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2Conditions_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2Conditions();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2Conditions_dump($this->_cPtr);
	}
}

class LassoSaml2Evidence {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2Evidence_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2Evidence_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2Evidence();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2Evidence_dump($this->_cPtr);
	}
}

class LassoSaml2NameID {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2NameID_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2NameID_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2NameID();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2NameID_dump($this->_cPtr);
	}
}

class LassoSamlp2StatusCode {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'Value') return LassoSamlp2StatusCode_Value_set($this->_cPtr,$value);
		if ($var == 'StatusCode') return LassoSamlp2StatusCode_StatusCode_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'Value') return LassoSamlp2StatusCode_Value_get($this->_cPtr);
		if ($var == 'StatusCode') return LassoSamlp2StatusCode_StatusCode_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2StatusCode();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2StatusCode_dump($this->_cPtr);
	}
}

class LassoSamlp2Status {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2Status_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2Status_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2Status();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2Status_dump($this->_cPtr);
	}
}

class LassoSaml2ConditionAbstract {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoSaml2ConditionAbstract();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2ConditionAbstract_dump($this->_cPtr);
	}
}

class LassoSaml2OneTimeUse {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoSaml2OneTimeUse();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2OneTimeUse_dump($this->_cPtr);
	}
}

class LassoSaml2Advice {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2Advice_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2Advice_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2Advice();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2Advice_dump($this->_cPtr);
	}
}

class LassoSaml2BaseIDAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'NameQualifier') return LassoSaml2BaseIDAbstract_NameQualifier_set($this->_cPtr,$value);
		if ($var == 'SPNameQualifier') return LassoSaml2BaseIDAbstract_SPNameQualifier_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'NameQualifier') return LassoSaml2BaseIDAbstract_NameQualifier_get($this->_cPtr);
		if ($var == 'SPNameQualifier') return LassoSaml2BaseIDAbstract_SPNameQualifier_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2BaseIDAbstract();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2BaseIDAbstract_dump($this->_cPtr);
	}
}

class LassoSaml2AuthnContext {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2AuthnContext_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2AuthnContext_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2AuthnContext();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2AuthnContext_dump($this->_cPtr);
	}
}

class LassoSaml2SubjectLocality {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'DNSName') return LassoSaml2SubjectLocality_DNSName_set($this->_cPtr,$value);
		if ($var == 'Address') return LassoSaml2SubjectLocality_Address_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'DNSName') return LassoSaml2SubjectLocality_DNSName_get($this->_cPtr);
		if ($var == 'Address') return LassoSaml2SubjectLocality_Address_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2SubjectLocality();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2SubjectLocality_dump($this->_cPtr);
	}
}

class LassoSaml2SubjectConfirmationData {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2SubjectConfirmationData_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2SubjectConfirmationData_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2SubjectConfirmationData();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2SubjectConfirmationData_dump($this->_cPtr);
	}
}

class LassoSaml2SubjectConfirmation {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2SubjectConfirmation_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2SubjectConfirmation_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2SubjectConfirmation();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2SubjectConfirmation_dump($this->_cPtr);
	}
}

class LassoSaml2ProxyRestriction {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'Audience') return LassoSaml2ProxyRestriction_Audience_set($this->_cPtr,$value);
		if ($var == 'Count') return LassoSaml2ProxyRestriction_Count_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'Audience') return LassoSaml2ProxyRestriction_Audience_get($this->_cPtr);
		if ($var == 'Count') return LassoSaml2ProxyRestriction_Count_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2ProxyRestriction();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2ProxyRestriction_dump($this->_cPtr);
	}
}

class LassoSaml2StatementAbstract {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoSaml2StatementAbstract();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2StatementAbstract_dump($this->_cPtr);
	}
}

class LassoSaml2AuthnStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2AuthnStatement_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2AuthnStatement_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2AuthnStatement();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2AuthnStatement_dump($this->_cPtr);
	}
}

class LassoSaml2AttributeStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'Attribute') return LassoSaml2AttributeStatement_Attribute_set($this->_cPtr,$value);
		if ($var == 'EncryptedAttribute') return LassoSaml2AttributeStatement_EncryptedAttribute_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'Attribute') return LassoSaml2AttributeStatement_Attribute_get($this->_cPtr);
		if ($var == 'EncryptedAttribute') return LassoSaml2AttributeStatement_EncryptedAttribute_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2AttributeStatement();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2AttributeStatement_dump($this->_cPtr);
	}
}

class LassoSamlp2IDPEntry {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2IDPEntry_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2IDPEntry_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2IDPEntry();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2IDPEntry_dump($this->_cPtr);
	}
}

class LassoSamlp2Extensions {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoSamlp2Extensions();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2Extensions_dump($this->_cPtr);
	}
}

class LassoSaml2Action {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'content') return LassoSaml2Action_content_set($this->_cPtr,$value);
		if ($var == 'Namespace') return LassoSaml2Action_Namespace_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'content') return LassoSaml2Action_content_get($this->_cPtr);
		if ($var == 'Namespace') return LassoSaml2Action_Namespace_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2Action();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2Action_dump($this->_cPtr);
	}
}

class LassoSamlp2StatusResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2StatusResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2StatusResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2StatusResponse();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2StatusResponse_dump($this->_cPtr);
	}
}

class LassoSamlp2Response {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2Response_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2Response_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2Response();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2Response_dump($this->_cPtr);
	}
}

class LassoSamlp2ArtifactResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2ArtifactResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2ArtifactResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2ArtifactResponse();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2ArtifactResponse_dump($this->_cPtr);
	}
}

class LassoSamlp2RequestAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2RequestAbstract_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2RequestAbstract_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2RequestAbstract();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2RequestAbstract_dump($this->_cPtr);
	}
}

class LassoSamlp2AssertionIDRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2AssertionIDRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2AssertionIDRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2AssertionIDRequest();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2AssertionIDRequest_dump($this->_cPtr);
	}
}

class LassoSamlp2ArtifactResolve {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2ArtifactResolve_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2ArtifactResolve_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2ArtifactResolve();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2ArtifactResolve_dump($this->_cPtr);
	}
}

class LassoSamlp2NameIDMappingRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2NameIDMappingRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2NameIDMappingRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2NameIDMappingRequest();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2NameIDMappingRequest_dump($this->_cPtr);
	}
}

class LassoSamlp2AuthnRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2AuthnRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2AuthnRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2AuthnRequest();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2AuthnRequest_dump($this->_cPtr);
	}
}

class LassoSamlp2SubjectQueryAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2SubjectQueryAbstract_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2SubjectQueryAbstract_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2SubjectQueryAbstract();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2SubjectQueryAbstract_dump($this->_cPtr);
	}
}

class LassoSamlp2AuthzDecisionQuery {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2AuthzDecisionQuery_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2AuthzDecisionQuery_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2AuthzDecisionQuery();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2AuthzDecisionQuery_dump($this->_cPtr);
	}
}

class LassoSamlp2AttributeQuery {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2AttributeQuery_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2AttributeQuery_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2AttributeQuery();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2AttributeQuery_dump($this->_cPtr);
	}
}

class LassoSaml2AudienceRestriction {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'Audience') return LassoSaml2AudienceRestriction_Audience_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'Audience') return LassoSaml2AudienceRestriction_Audience_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2AudienceRestriction();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2AudienceRestriction_dump($this->_cPtr);
	}
}

class LassoSamlp2LogoutRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2LogoutRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2LogoutRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2LogoutRequest();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2LogoutRequest_dump($this->_cPtr);
	}
}

class LassoSamlp2AuthnQuery {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2AuthnQuery_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2AuthnQuery_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2AuthnQuery();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2AuthnQuery_dump($this->_cPtr);
	}
}

class LassoSaml2Attribute {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2Attribute_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2Attribute_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2Attribute();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2Attribute_dump($this->_cPtr);
	}
}

class LassoSamlp2Terminate {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoSamlp2Terminate();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2Terminate_dump($this->_cPtr);
	}
}

class LassoSamlp2StatusDetail {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoSamlp2StatusDetail();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2StatusDetail_dump($this->_cPtr);
	}
}

class LassoSaml2AuthzDecisionStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2AuthzDecisionStatement_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2AuthzDecisionStatement_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2AuthzDecisionStatement();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2AuthzDecisionStatement_dump($this->_cPtr);
	}
}

class LassoSamlp2NameIDMappingResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2NameIDMappingResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2NameIDMappingResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2NameIDMappingResponse();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2NameIDMappingResponse_dump($this->_cPtr);
	}
}

class LassoSaml2EncryptedElement {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_LassoSaml2EncryptedElement();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2EncryptedElement_dump($this->_cPtr);
	}
}

class LassoSamlp2ManageNameIDRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2ManageNameIDRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2ManageNameIDRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2ManageNameIDRequest();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2ManageNameIDRequest_dump($this->_cPtr);
	}
}

class LassoSamlp2Scoping {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSamlp2Scoping_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSamlp2Scoping_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSamlp2Scoping();
	}

	function __construct() {
		$this->_cPtr=LassoSamlp2Scoping_dump($this->_cPtr);
	}
}

class LassoSaml2Subject {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LassoSaml2Subject_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LassoSaml2Subject_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LassoSaml2Subject();
	}

	function __construct() {
		$this->_cPtr=LassoSaml2Subject_dump($this->_cPtr);
	}
}


?>
