<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded("lasso")) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_lasso.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX is available as of PHP 4.3.0, for older PHP assume 'so'.
    // It gives 'dylib' on MacOS X which is for libraries, modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'PHP_SHLIB_SUFFIX' || PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('lasso.so')) return;
    } else {
      if (!dl('lasso.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class lasso {
	const LASSO_WSF_SUPPORT = WSF_SUPPORT;

	const LASSO_HTTP_METHOD_NONE = HTTP_METHOD_NONE;

	const LASSO_HTTP_METHOD_ANY = HTTP_METHOD_ANY;

	const LASSO_HTTP_METHOD_IDP_INITIATED = HTTP_METHOD_IDP_INITIATED;

	const LASSO_HTTP_METHOD_GET = HTTP_METHOD_GET;

	const LASSO_HTTP_METHOD_POST = HTTP_METHOD_POST;

	const LASSO_HTTP_METHOD_REDIRECT = HTTP_METHOD_REDIRECT;

	const LASSO_HTTP_METHOD_SOAP = HTTP_METHOD_SOAP;

	const LASSO_HTTP_METHOD_ARTIFACT_GET = HTTP_METHOD_ARTIFACT_GET;

	const LASSO_HTTP_METHOD_ARTIFACT_POST = HTTP_METHOD_ARTIFACT_POST;

	const LASSO_MD_PROTOCOL_TYPE_FEDERATION_TERMINATION = MD_PROTOCOL_TYPE_FEDERATION_TERMINATION;

	const LASSO_MD_PROTOCOL_TYPE_NAME_IDENTIFIER_MAPPING = MD_PROTOCOL_TYPE_NAME_IDENTIFIER_MAPPING;

	const LASSO_MD_PROTOCOL_TYPE_REGISTER_NAME_IDENTIFIER = MD_PROTOCOL_TYPE_REGISTER_NAME_IDENTIFIER;

	const LASSO_MD_PROTOCOL_TYPE_SINGLE_LOGOUT = MD_PROTOCOL_TYPE_SINGLE_LOGOUT;

	const LASSO_MD_PROTOCOL_TYPE_SINGLE_SIGN_ON = MD_PROTOCOL_TYPE_SINGLE_SIGN_ON;

	const LASSO_MD_PROTOCOL_TYPE_ARTIFACT_RESOLUTION = MD_PROTOCOL_TYPE_ARTIFACT_RESOLUTION;

	const LASSO_MD_PROTOCOL_TYPE_MANAGE_NAME_ID = MD_PROTOCOL_TYPE_MANAGE_NAME_ID;

	const LASSO_MD_PROTOCOL_TYPE_ASSERTION_ID_REQUEST = LASSO_MD_PROTOCOL_TYPE_ASSERTION_ID_REQUEST;

	const LASSO_LIB_CONSENT_OBTAINED = LIB_CONSENT_OBTAINED;

	const LASSO_LIB_CONSENT_OBTAINED_PRIOR = LIB_CONSENT_OBTAINED_PRIOR;

	const LASSO_LIB_CONSENT_OBTAINED_CURRENT_IMPLICIT = LIB_CONSENT_OBTAINED_CURRENT_IMPLICIT;

	const LASSO_LIB_CONSENT_OBTAINED_CURRENT_EXPLICIT = LIB_CONSENT_OBTAINED_CURRENT_EXPLICIT;

	const LASSO_LIB_CONSENT_UNAVAILABLE = LIB_CONSENT_UNAVAILABLE;

	const LASSO_LIB_CONSENT_INAPPLICABLE = LIB_CONSENT_INAPPLICABLE;

	const LASSO_LIB_NAMEID_POLICY_TYPE_NONE = LIB_NAMEID_POLICY_TYPE_NONE;

	const LASSO_LIB_NAMEID_POLICY_TYPE_ONE_TIME = LIB_NAMEID_POLICY_TYPE_ONE_TIME;

	const LASSO_LIB_NAMEID_POLICY_TYPE_FEDERATED = LIB_NAMEID_POLICY_TYPE_FEDERATED;

	const LASSO_LIB_NAMEID_POLICY_TYPE_ANY = LIB_NAMEID_POLICY_TYPE_ANY;

	const LASSO_LIB_PROTOCOL_PROFILE_BRWS_ART = LIB_PROTOCOL_PROFILE_BRWS_ART;

	const LASSO_LIB_PROTOCOL_PROFILE_BRWS_POST = LIB_PROTOCOL_PROFILE_BRWS_POST;

	const LASSO_LIB_PROTOCOL_PROFILE_BRWS_LECP = LIB_PROTOCOL_PROFILE_BRWS_LECP;

	const LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_IDP_HTTP = LIB_PROTOCOL_PROFILE_FED_TERM_IDP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_IDP_SOAP = LIB_PROTOCOL_PROFILE_FED_TERM_IDP_SOAP;

	const LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_SP_HTTP = LIB_PROTOCOL_PROFILE_FED_TERM_SP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_FED_TERM_SP_SOAP = LIB_PROTOCOL_PROFILE_FED_TERM_SP_SOAP;

	const LASSO_LIB_PROTOCOL_PROFILE_RNI_IDP_HTTP = LIB_PROTOCOL_PROFILE_RNI_IDP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_RNI_IDP_SOAP = LIB_PROTOCOL_PROFILE_RNI_IDP_SOAP;

	const LASSO_LIB_PROTOCOL_PROFILE_RNI_SP_HTTP = LIB_PROTOCOL_PROFILE_RNI_SP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_RNI_SP_SOAP = LIB_PROTOCOL_PROFILE_RNI_SP_SOAP;

	const LASSO_LIB_PROTOCOL_PROFILE_SLO_IDP_HTTP = LIB_PROTOCOL_PROFILE_SLO_IDP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_SLO_IDP_SOAP = LIB_PROTOCOL_PROFILE_SLO_IDP_SOAP;

	const LASSO_LIB_PROTOCOL_PROFILE_SLO_SP_HTTP = LIB_PROTOCOL_PROFILE_SLO_SP_HTTP;

	const LASSO_LIB_PROTOCOL_PROFILE_SLO_SP_SOAP = LIB_PROTOCOL_PROFILE_SLO_SP_SOAP;

	const LASSO_LOGIN_PROTOCOL_PROFILE_BRWS_ART = LOGIN_PROTOCOL_PROFILE_BRWS_ART;

	const LASSO_LOGIN_PROTOCOL_PROFILE_BRWS_POST = LOGIN_PROTOCOL_PROFILE_BRWS_POST;

	const LASSO_LOGIN_PROTOCOL_PROFILE_BRWS_LECP = LOGIN_PROTOCOL_PROFILE_BRWS_LECP;

	const LASSO_PROVIDER_ROLE_NONE = PROVIDER_ROLE_NONE;

	const LASSO_PROVIDER_ROLE_SP = PROVIDER_ROLE_SP;

	const LASSO_PROVIDER_ROLE_IDP = PROVIDER_ROLE_IDP;

	const LASSO_PROTOCOL_LIBERTY_1_0 = PROTOCOL_LIBERTY_1_0;

	const LASSO_PROTOCOL_LIBERTY_1_1 = PROTOCOL_LIBERTY_1_1;

	const LASSO_PROTOCOL_LIBERTY_1_2 = PROTOCOL_LIBERTY_1_2;

	const LASSO_PROTOCOL_SAML_2_0 = PROTOCOL_SAML_2_0;

	const LASSO_REQUEST_TYPE_INVALID = REQUEST_TYPE_INVALID;

	const LASSO_REQUEST_TYPE_LOGIN = REQUEST_TYPE_LOGIN;

	const LASSO_REQUEST_TYPE_LOGOUT = REQUEST_TYPE_LOGOUT;

	const LASSO_REQUEST_TYPE_DEFEDERATION = REQUEST_TYPE_DEFEDERATION;

	const LASSO_REQUEST_TYPE_NAME_REGISTRATION = REQUEST_TYPE_NAME_REGISTRATION;

	const LASSO_REQUEST_TYPE_NAME_IDENTIFIER_MAPPING = REQUEST_TYPE_NAME_IDENTIFIER_MAPPING;

	const LASSO_REQUEST_TYPE_LECP = REQUEST_TYPE_LECP;

	const LASSO_REQUEST_TYPE_DISCO_QUERY = REQUEST_TYPE_DISCO_QUERY;

	const LASSO_REQUEST_TYPE_DISCO_MODIFY = REQUEST_TYPE_DISCO_MODIFY;

	const LASSO_REQUEST_TYPE_DST_QUERY = REQUEST_TYPE_DST_QUERY;

	const LASSO_REQUEST_TYPE_DST_MODIFY = REQUEST_TYPE_DST_MODIFY;

	const LASSO_REQUEST_TYPE_SASL_REQUEST = REQUEST_TYPE_SASL_REQUEST;

	const LASSO_REQUEST_TYPE_NAME_ID_MANAGEMENT = REQUEST_TYPE_NAME_ID_MANAGEMENT;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_INTERNET_PROTOCOL = LIB_AUTHN_CONTEXT_CLASS_REF_INTERNET_PROTOCOL;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_INTERNET_PROTOCOL_PASSWORD = LIB_AUTHN_CONTEXT_CLASS_REF_INTERNET_PROTOCOL_PASSWORD;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_ONE_FACTOR_UNREGISTERED = LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_ONE_FACTOR_UNREGISTERED;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_TWO_FACTOR_UNREGISTERED = LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_TWO_FACTOR_UNREGISTERED;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_ONE_FACTOR_CONTRACT = LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_ONE_FACTOR_CONTRACT;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_TWO_FACTOR_CONTRACT = LIB_AUTHN_CONTEXT_CLASS_REF_MOBILE_TWO_FACTOR_CONTRACT;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_PASSWORD = LIB_AUTHN_CONTEXT_CLASS_REF_PASSWORD;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_PASSWORD_PROTECTED_TRANSPORT = LIB_AUTHN_CONTEXT_CLASS_REF_PASSWORD_PROTECTED_TRANSPORT;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_PREVIOUS_SESSION = LIB_AUTHN_CONTEXT_CLASS_REF_PREVIOUS_SESSION;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_SMARTCARD = LIB_AUTHN_CONTEXT_CLASS_REF_SMARTCARD;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_SMARTCARD_PKI = LIB_AUTHN_CONTEXT_CLASS_REF_SMARTCARD_PKI;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_SOFTWARE_PKI = LIB_AUTHN_CONTEXT_CLASS_REF_SOFTWARE_PKI;

	const LASSO_LIB_AUTHN_CONTEXT_CLASS_REF_TIME_SYNC_TOKEN = LIB_AUTHN_CONTEXT_CLASS_REF_TIME_SYNC_TOKEN;

	const LASSO_LIB_AUTHN_CONTEXT_COMPARISON_EXACT = LIB_AUTHN_CONTEXT_COMPARISON_EXACT;

	const LASSO_LIB_AUTHN_CONTEXT_COMPARISON_MINIMUM = LIB_AUTHN_CONTEXT_COMPARISON_MINIMUM;

	const LASSO_LIB_AUTHN_CONTEXT_COMPARISON_MAXIMUM = LIB_AUTHN_CONTEXT_COMPARISON_MAXIMUM;

	const LASSO_LIB_AUTHN_CONTEXT_COMPARISON_BETTER = LIB_AUTHN_CONTEXT_COMPARISON_BETTER;

	const LASSO_SAML_AUTHENTICATION_METHOD_PASSWORD = SAML_AUTHENTICATION_METHOD_PASSWORD;

	const LASSO_SAML_AUTHENTICATION_METHOD_KERBEROS = SAML_AUTHENTICATION_METHOD_KERBEROS;

	const LASSO_SAML_AUTHENTICATION_METHOD_SECURE_REMOTE_PASSWORD = SAML_AUTHENTICATION_METHOD_SECURE_REMOTE_PASSWORD;

	const LASSO_SAML_AUTHENTICATION_METHOD_HARDWARE_TOKEN = SAML_AUTHENTICATION_METHOD_HARDWARE_TOKEN;

	const LASSO_SAML_AUTHENTICATION_METHOD_SMARTCARD_PKI = SAML_AUTHENTICATION_METHOD_SMARTCARD_PKI;

	const LASSO_SAML_AUTHENTICATION_METHOD_SOFTWARE_PKI = SAML_AUTHENTICATION_METHOD_SOFTWARE_PKI;

	const LASSO_SAML_AUTHENTICATION_METHOD_PGP = SAML_AUTHENTICATION_METHOD_PGP;

	const LASSO_SAML_AUTHENTICATION_METHODS_PKI = SAML_AUTHENTICATION_METHODS_PKI;

	const LASSO_SAML_AUTHENTICATION_METHOD_XKMS = SAML_AUTHENTICATION_METHOD_XKMS;

	const LASSO_SAML_AUTHENTICATION_METHOD_XMLD_SIG = SAML_AUTHENTICATION_METHOD_XMLD_SIG;

	const LASSO_SAML_AUTHENTICATION_METHOD_UNSPECIFIED = SAML_AUTHENTICATION_METHOD_UNSPECIFIED;

	const LASSO_SAML_AUTHENTICATION_METHOD_LIBERTY = SAML_AUTHENTICATION_METHOD_LIBERTY;

	const LASSO_SIGNATURE_METHOD_RSA_SHA1 = SIGNATURE_METHOD_RSA_SHA1;

	const LASSO_SIGNATURE_METHOD_DSA_SHA1 = SIGNATURE_METHOD_DSA_SHA1;

	const LASSO_ENCRYPTION_MODE_NONE = ENCRYPTION_MODE_NONE;

	const LASSO_ENCRYPTION_MODE_NAMEID = ENCRYPTION_MODE_NAMEID;

	const LASSO_ENCRYPTION_MODE_ASSERTION = ENCRYPTION_MODE_ASSERTION;

	const LASSO_ENCRYPTION_SYM_KEY_TYPE_DEFAULT = ENCRYPTION_SYM_KEY_TYPE_DEFAULT;

	const LASSO_ENCRYPTION_SYM_KEY_TYPE_AES_256 = ENCRYPTION_SYM_KEY_TYPE_AES_256;

	const LASSO_ENCRYPTION_SYM_KEY_TYPE_AES_128 = ENCRYPTION_SYM_KEY_TYPE_AES_128;

	const LASSO_ENCRYPTION_SYM_KEY_TYPE_3DES = ENCRYPTION_SYM_KEY_TYPE_3DES;

	const LASSO_ERROR_UNDEFINED = ERROR_UNDEFINED;

	const LASSO_ERROR_UNIMPLEMENTED = ERROR_UNIMPLEMENTED;

	const LASSO_XML_ERROR_NODE_NOT_FOUND = XML_ERROR_NODE_NOT_FOUND;

	const LASSO_XML_ERROR_NODE_CONTENT_NOT_FOUND = XML_ERROR_NODE_CONTENT_NOT_FOUND;

	const LASSO_XML_ERROR_ATTR_NOT_FOUND = XML_ERROR_ATTR_NOT_FOUND;

	const LASSO_XML_ERROR_ATTR_VALUE_NOT_FOUND = XML_ERROR_ATTR_VALUE_NOT_FOUND;

	const LASSO_XML_ERROR_INVALID_FILE = LASSO_XML_ERROR_INVALID_FILE;

	const LASSO_XML_ERROR_OBJECT_CONSTRUCTION_FAILED = LASSO_XML_ERROR_OBJECT_CONSTRUCTION_FAILED;

	const LASSO_XML_ERROR_MISSING_NAMESPACE = LASSO_XML_ERROR_MISSING_NAMESPACE;

	const LASSO_DS_ERROR_SIGNATURE_NOT_FOUND = DS_ERROR_SIGNATURE_NOT_FOUND;

	const LASSO_DS_ERROR_INVALID_SIGNATURE = DS_ERROR_INVALID_SIGNATURE;

	const LASSO_DS_ERROR_SIGNATURE_TMPL_CREATION_FAILED = DS_ERROR_SIGNATURE_TMPL_CREATION_FAILED;

	const LASSO_DS_ERROR_CONTEXT_CREATION_FAILED = DS_ERROR_CONTEXT_CREATION_FAILED;

	const LASSO_DS_ERROR_PUBLIC_KEY_LOAD_FAILED = DS_ERROR_PUBLIC_KEY_LOAD_FAILED;

	const LASSO_DS_ERROR_PRIVATE_KEY_LOAD_FAILED = DS_ERROR_PRIVATE_KEY_LOAD_FAILED;

	const LASSO_DS_ERROR_CERTIFICATE_LOAD_FAILED = DS_ERROR_CERTIFICATE_LOAD_FAILED;

	const LASSO_DS_ERROR_SIGNATURE_FAILED = DS_ERROR_SIGNATURE_FAILED;

	const LASSO_DS_ERROR_KEYS_MNGR_CREATION_FAILED = DS_ERROR_KEYS_MNGR_CREATION_FAILED;

	const LASSO_DS_ERROR_KEYS_MNGR_INIT_FAILED = DS_ERROR_KEYS_MNGR_INIT_FAILED;

	const LASSO_DS_ERROR_SIGNATURE_VERIFICATION_FAILED = DS_ERROR_SIGNATURE_VERIFICATION_FAILED;

	const LASSO_DS_ERROR_CA_CERT_CHAIN_LOAD_FAILED = DS_ERROR_CA_CERT_CHAIN_LOAD_FAILED;

	const LASSO_DS_ERROR_INVALID_SIGALG = DS_ERROR_INVALID_SIGALG;

	const LASSO_DS_ERROR_DIGEST_COMPUTE_FAILED = DS_ERROR_DIGEST_COMPUTE_FAILED;

	const LASSO_DS_ERROR_SIGNATURE_TEMPLATE_NOT_FOUND = DS_ERROR_SIGNATURE_TEMPLATE_NOT_FOUND;

	const LASSO_SERVER_ERROR_PROVIDER_NOT_FOUND = SERVER_ERROR_PROVIDER_NOT_FOUND;

	const LASSO_SERVER_ERROR_ADD_PROVIDER_FAILED = SERVER_ERROR_ADD_PROVIDER_FAILED;

	const LASSO_SERVER_ERROR_ADD_PROVIDER_PROTOCOL_MISMATCH = SERVER_ERROR_ADD_PROVIDER_PROTOCOL_MISMATCH;

	const LASSO_SERVER_ERROR_SET_ENCRYPTION_PRIVATE_KEY_FAILED = SERVER_ERROR_SET_ENCRYPTION_PRIVATE_KEY_FAILED;

	const LASSO_SERVER_ERROR_INVALID_XML = LASSO_SERVER_ERROR_INVALID_XML;

	const LASSO_LOGOUT_ERROR_UNSUPPORTED_PROFILE = LOGOUT_ERROR_UNSUPPORTED_PROFILE;

	const LASSO_LOGOUT_ERROR_REQUEST_DENIED = LOGOUT_ERROR_REQUEST_DENIED;

	const LASSO_LOGOUT_ERROR_FEDERATION_NOT_FOUND = LOGOUT_ERROR_FEDERATION_NOT_FOUND;

	const LASSO_LOGOUT_ERROR_UNKNOWN_PRINCIPAL = LOGOUT_ERROR_UNKNOWN_PRINCIPAL;

	const LASSO_PROFILE_ERROR_INVALID_QUERY = PROFILE_ERROR_INVALID_QUERY;

	const LASSO_PROFILE_ERROR_INVALID_POST_MSG = PROFILE_ERROR_INVALID_POST_MSG;

	const LASSO_PROFILE_ERROR_INVALID_SOAP_MSG = PROFILE_ERROR_INVALID_SOAP_MSG;

	const LASSO_PROFILE_ERROR_MISSING_REQUEST = PROFILE_ERROR_MISSING_REQUEST;

	const LASSO_PROFILE_ERROR_INVALID_HTTP_METHOD = PROFILE_ERROR_INVALID_HTTP_METHOD;

	const LASSO_PROFILE_ERROR_INVALID_PROTOCOLPROFILE = PROFILE_ERROR_INVALID_PROTOCOLPROFILE;

	const LASSO_PROFILE_ERROR_INVALID_MSG = PROFILE_ERROR_INVALID_MSG;

	const LASSO_PROFILE_ERROR_MISSING_REMOTE_PROVIDERID = PROFILE_ERROR_MISSING_REMOTE_PROVIDERID;

	const LASSO_PROFILE_ERROR_UNSUPPORTED_PROFILE = PROFILE_ERROR_UNSUPPORTED_PROFILE;

	const LASSO_PROFILE_ERROR_UNKNOWN_PROFILE_URL = PROFILE_ERROR_UNKNOWN_PROFILE_URL;

	const LASSO_PROFILE_ERROR_IDENTITY_NOT_FOUND = PROFILE_ERROR_IDENTITY_NOT_FOUND;

	const LASSO_PROFILE_ERROR_FEDERATION_NOT_FOUND = PROFILE_ERROR_FEDERATION_NOT_FOUND;

	const LASSO_PROFILE_ERROR_NAME_IDENTIFIER_NOT_FOUND = PROFILE_ERROR_NAME_IDENTIFIER_NOT_FOUND;

	const LASSO_PROFILE_ERROR_BUILDING_QUERY_FAILED = PROFILE_ERROR_BUILDING_QUERY_FAILED;

	const LASSO_PROFILE_ERROR_BUILDING_REQUEST_FAILED = PROFILE_ERROR_BUILDING_REQUEST_FAILED;

	const LASSO_PROFILE_ERROR_BUILDING_MESSAGE_FAILED = PROFILE_ERROR_BUILDING_MESSAGE_FAILED;

	const LASSO_PROFILE_ERROR_BUILDING_RESPONSE_FAILED = PROFILE_ERROR_BUILDING_RESPONSE_FAILED;

	const LASSO_PROFILE_ERROR_SESSION_NOT_FOUND = PROFILE_ERROR_SESSION_NOT_FOUND;

	const LASSO_PROFILE_ERROR_BAD_IDENTITY_DUMP = PROFILE_ERROR_BAD_IDENTITY_DUMP;

	const LASSO_PROFILE_ERROR_BAD_SESSION_DUMP = PROFILE_ERROR_BAD_SESSION_DUMP;

	const LASSO_PROFILE_ERROR_MISSING_RESPONSE = PROFILE_ERROR_MISSING_RESPONSE;

	const LASSO_PROFILE_ERROR_MISSING_STATUS_CODE = PROFILE_ERROR_MISSING_STATUS_CODE;

	const LASSO_PROFILE_ERROR_MISSING_ARTIFACT = PROFILE_ERROR_MISSING_ARTIFACT;

	const LASSO_PROFILE_ERROR_MISSING_RESOURCE_OFFERING = PROFILE_ERROR_MISSING_RESOURCE_OFFERING;

	const LASSO_PROFILE_ERROR_MISSING_SERVICE_DESCRIPTION = PROFILE_ERROR_MISSING_SERVICE_DESCRIPTION;

	const LASSO_PROFILE_ERROR_MISSING_SERVICE_TYPE = PROFILE_ERROR_MISSING_SERVICE_TYPE;

	const LASSO_PROFILE_ERROR_MISSING_ASSERTION = PROFILE_ERROR_MISSING_ASSERTION;

	const LASSO_PROFILE_ERROR_MISSING_SUBJECT = PROFILE_ERROR_MISSING_SUBJECT;

	const LASSO_PROFILE_ERROR_MISSING_NAME_IDENTIFIER = PROFILE_ERROR_MISSING_NAME_IDENTIFIER;

	const LASSO_PROFILE_ERROR_INVALID_ARTIFACT = PROFILE_ERROR_INVALID_ARTIFACT;

	const LASSO_PROFILE_ERROR_MISSING_ENCRYPTION_PRIVATE_KEY = PROFILE_ERROR_MISSING_ENCRYPTION_PRIVATE_KEY;

	const LASSO_PROFILE_ERROR_STATUS_NOT_SUCCESS = PROFILE_ERROR_STATUS_NOT_SUCCESS;

	const LASSO_PROFILE_ERROR_MISSING_ISSUER = LASSO_PROFILE_ERROR_MISSING_ISSUER;

	const LASSO_PROFILE_ERROR_MISSING_SERVICE_INSTANCE = LASSO_PROFILE_ERROR_MISSING_SERVICE_INSTANCE;

	const LASSO_PARAM_ERROR_BAD_TYPE_OR_NULL_OBJ = LASSO_PARAM_ERROR_BAD_TYPE_OR_NULL_OBJ;

	const LASSO_PARAM_ERROR_INVALID_VALUE = PARAM_ERROR_INVALID_VALUE;

	const LASSO_PARAM_ERROR_CHECK_FAILED = LASSO_PARAM_ERROR_CHECK_FAILED;

	const LASSO_LOGIN_ERROR_FEDERATION_NOT_FOUND = LOGIN_ERROR_FEDERATION_NOT_FOUND;

	const LASSO_LOGIN_ERROR_CONSENT_NOT_OBTAINED = LOGIN_ERROR_CONSENT_NOT_OBTAINED;

	const LASSO_LOGIN_ERROR_INVALID_NAMEIDPOLICY = LOGIN_ERROR_INVALID_NAMEIDPOLICY;

	const LASSO_LOGIN_ERROR_REQUEST_DENIED = LOGIN_ERROR_REQUEST_DENIED;

	const LASSO_LOGIN_ERROR_INVALID_SIGNATURE = LOGIN_ERROR_INVALID_SIGNATURE;

	const LASSO_LOGIN_ERROR_UNSIGNED_AUTHN_REQUEST = LOGIN_ERROR_UNSIGNED_AUTHN_REQUEST;

	const LASSO_LOGIN_ERROR_STATUS_NOT_SUCCESS = LOGIN_ERROR_STATUS_NOT_SUCCESS;

	const LASSO_LOGIN_ERROR_UNKNOWN_PRINCIPAL = LOGIN_ERROR_UNKNOWN_PRINCIPAL;

	const LASSO_LOGIN_ERROR_NO_DEFAULT_ENDPOINT = LOGIN_ERROR_NO_DEFAULT_ENDPOINT;

	const LASSO_LOGIN_ERROR_ASSERTION_REPLAY = LOGIN_ERROR_ASSERTION_REPLAY;

	const LASSO_DEFEDERATION_ERROR_MISSING_NAME_IDENTIFIER = DEFEDERATION_ERROR_MISSING_NAME_IDENTIFIER;

	const LASSO_SOAP_FAULT_REDIRECT_REQUEST = SOAP_FAULT_REDIRECT_REQUEST;

	const LASSO_SOAP_ERROR_MISSING_HEADER = LASSO_SOAP_ERROR_MISSING_HEADER;

	const LASSO_SOAP_ERROR_MISSING_BODY = LASSO_SOAP_ERROR_MISSING_BODY;

	const LASSO_NAME_IDENTIFIER_MAPPING_ERROR_MISSING_TARGET_NAMESPACE = NAME_IDENTIFIER_MAPPING_ERROR_MISSING_TARGET_NAMESPACE;

	const LASSO_NAME_IDENTIFIER_MAPPING_ERROR_FORBIDDEN_CALL_ON_THIS_SIDE = NAME_IDENTIFIER_MAPPING_ERROR_FORBIDDEN_CALL_ON_THIS_SIDE;

	const LASSO_NAME_IDENTIFIER_MAPPING_ERROR_MISSING_TARGET_IDENTIFIER = NAME_IDENTIFIER_MAPPING_ERROR_MISSING_TARGET_IDENTIFIER;

	const LASSO_DATA_SERVICE_ERROR_UNREGISTERED_DST = LASSO_DATA_SERVICE_ERROR_UNREGISTERED_DST;

	const LASSO_WSF_PROFILE_ERROR_MISSING_CORRELATION = LASSO_WSF_PROFILE_ERROR_MISSING_CORRELATION;

	const LASSO_WSF_PROFILE_ERROR_MISSING_SECURITY = LASSO_WSF_PROFILE_ERROR_MISSING_SECURITY;

	static function init() {
		return init();
	}

	static function shutdown() {
		return shutdown();
	}

	const LASSO_CHECK_VERSION_EXACT = CHECK_VERSION_EXACT;

	const LASSO_CHECK_VERSIONABI_COMPATIBLE = CHECK_VERSIONABI_COMPATIBLE;

	const LASSO_CHECK_VERSION_NUMERIC = CHECK_VERSION_NUMERIC;

	static function checkVersion($major,$minor,$subminor,$mode=null) {
		switch (func_num_args()) {
		case 3: $r=checkVersion($major,$minor,$subminor); break;
		default: $r=checkVersion($major,$minor,$subminor,$mode);
		}
		return $r;
	}

	static function registerDstService($prefix,$href) {
		registerDstService($prefix,$href);
	}

	static function getRequestTypeFromSoapMsg($soap) {
		return getRequestTypeFromSoapMsg($soap);
	}

	static function isLibertyQuery($query) {
		return isLibertyQuery($query);
	}

	const LASSO_SAML2_SUPPORT = SAML2_SUPPORT;

	static function isSamlQuery($query) {
		return isSamlQuery($query);
	}

	const LASSO_SAML2_NAME_IDENTIFIER_FORMAT_PERSISTENT = SAML2_NAME_IDENTIFIER_FORMAT_PERSISTENT;

	const LASSO_SAML2_NAME_IDENTIFIER_FORMAT_TRANSIENT = SAML2_NAME_IDENTIFIER_FORMAT_TRANSIENT;

	const LASSO_SAML2_NAME_IDENTIFIER_FORMAT_ENCRYPTED = SAML2_NAME_IDENTIFIER_FORMAT_ENCRYPTED;

	const LASSO_SAML2_METADATA_BINDING_SOAP = SAML2_METADATA_BINDING_SOAP;

	const LASSO_SAML2_METADATA_BINDING_REDIRECT = SAML2_METADATA_BINDING_REDIRECT;

	const LASSO_SAML2_METADATA_BINDING_POST = SAML2_METADATA_BINDING_POST;

	const LASSO_SAML2_METADATA_BINDING_ARTIFACT = SAML2_METADATA_BINDING_ARTIFACT;

	const LASSO_SAML2_METADATA_BINDING_PAOS = SAML2_METADATA_BINDING_PAOS;

	const LASSO_SAML2_AUTHN_CONTEXT_AUTHENTICATED_TELEPHONY = SAML2_AUTHN_CONTEXT_AUTHENTICATED_TELEPHONY;

	const LASSO_SAML2_AUTHN_CONTEXT_INTERNET_PROTOCOL = SAML2_AUTHN_CONTEXT_INTERNET_PROTOCOL;

	const LASSO_SAML2_AUTHN_CONTEXT_INTERNET_PROTOCOL_PASSWORD = SAML2_AUTHN_CONTEXT_INTERNET_PROTOCOL_PASSWORD;

	const LASSO_SAML2_AUTHN_CONTEXT_KERBEROS = SAML2_AUTHN_CONTEXT_KERBEROS;

	const LASSO_SAML2_AUTHN_CONTEXT_MOBILE_ONE_FACTOR_CONTRACT = SAML2_AUTHN_CONTEXT_MOBILE_ONE_FACTOR_CONTRACT;

	const LASSO_SAML2_AUTHN_CONTEXT_MOBILE_ONE_FACTOR_UNREGISTERED = SAML2_AUTHN_CONTEXT_MOBILE_ONE_FACTOR_UNREGISTERED;

	const LASSO_SAML2_AUTHN_CONTEXT_MOBILE_TWO_FACTOR_CONTRACT = SAML2_AUTHN_CONTEXT_MOBILE_TWO_FACTOR_CONTRACT;

	const LASSO_SAML2_AUTHN_CONTEXT_MOBILE_TWO_FACTOR_UNREGISTERED = SAML2_AUTHN_CONTEXT_MOBILE_TWO_FACTOR_UNREGISTERED;

	const LASSO_SAML2_AUTHN_CONTEXT_NOMAD_TELEPHONY = SAML2_AUTHN_CONTEXT_NOMAD_TELEPHONY;

	const LASSO_SAML2_AUTHN_CONTEXT_PERSONALIZED_TELEPHONY = SAML2_AUTHN_CONTEXT_PERSONALIZED_TELEPHONY;

	const LASSO_SAML2_AUTHN_CONTEXT_PGP = SAML2_AUTHN_CONTEXT_PGP;

	const LASSO_SAML2_AUTHN_CONTEXT_PASSWORD_PROTECTED_TRANSPORT = SAML2_AUTHN_CONTEXT_PASSWORD_PROTECTED_TRANSPORT;

	const LASSO_SAML2_AUTHN_CONTEXT_PASSWORD = SAML2_AUTHN_CONTEXT_PASSWORD;

	const LASSO_SAML2_AUTHN_CONTEXT_PREVIOUS_SESSION = SAML2_AUTHN_CONTEXT_PREVIOUS_SESSION;

	const LASSO_SAML2_AUTHN_CONTEXT_SMARTCARD = SAML2_AUTHN_CONTEXT_SMARTCARD;

	const LASSO_SAML2_AUTHN_CONTEXT_SMARTCARD_PKI = SAML2_AUTHN_CONTEXT_SMARTCARD_PKI;

	const LASSO_SAML2_AUTHN_CONTEXT_SOFTWARE_PKI = SAML2_AUTHN_CONTEXT_SOFTWARE_PKI;

	const LASSO_SAML2_AUTHN_CONTEXT_SPKI = SAML2_AUTHN_CONTEXT_SPKI;

	const LASSO_SAML2_AUTHN_CONTEXT_SECURE_REMOTE_PASSWORD = SAML2_AUTHN_CONTEXT_SECURE_REMOTE_PASSWORD;

	const LASSO_SAML2_AUTHN_CONTEXT_TLS_CLIENT = SAML2_AUTHN_CONTEXT_TLS_CLIENT;

	const LASSO_SAML2_AUTHN_CONTEXT_X509 = SAML2_AUTHN_CONTEXT_X509;

	const LASSO_SAML2_AUTHN_CONTEXT_TELEPHONY = SAML2_AUTHN_CONTEXT_TELEPHONY;

	const LASSO_SAML2_AUTHN_CONTEXT_TIME_SYNC_TOKEN = SAML2_AUTHN_CONTEXT_TIME_SYNC_TOKEN;

	const LASSO_SAML2_AUTHN_CONTEXT_XMLDSIG = SAML2_AUTHN_CONTEXT_XMLDSIG;
}

/* PHP Proxy Classes */
class Node {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Node();
	}

	function __construct() {
		$this->_cPtr=Node_dump($this->_cPtr);
	}
}

class NodeList {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_NodeList();
	}

	function append($item) {
		NodeList_append($this->_cPtr,$item);
	}

	function cast() {
		return NodeList_cast($this->_cPtr);
	}

	static function frompointer($nodeArray) {
		$r=NodeList_frompointer($nodeArray);
		return is_resource($r) ? new NodeList($r) : $r;
	}

	function __construct($index) {
		$this->_cPtr=NodeList_getItem($this->_cPtr,$index);
	}

	function length() {
		return NodeList_length($this->_cPtr);
	}

	function setItem($index,$item) {
		NodeList_setItem($this->_cPtr,$index,$item);
	}
}

class StringList {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_StringList();
	}

	function append($item) {
		StringList_append($this->_cPtr,$item);
	}

	function cast() {
		return StringList_cast($this->_cPtr);
	}

	static function frompointer($stringArray) {
		$r=StringList_frompointer($stringArray);
		return is_resource($r) ? new StringList($r) : $r;
	}

	function getItem($index) {
		return StringList_getItem($this->_cPtr,$index);
	}

	function length() {
		return StringList_length($this->_cPtr);
	}

	function setItem($index,$item) {
		StringList_setItem($this->_cPtr,$index,$item);
	}
}

class SamlAdvice {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'assertion') return SamlAdvice_assertion_set($this->_cPtr,$value);
		if ($var == 'assertionIdReference') return SamlAdvice_assertionIdReference_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'assertion') return SamlAdvice_assertion_get($this->_cPtr);
		if ($var == 'assertionIdReference') return SamlAdvice_assertionIdReference_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlAdvice();
	}

	function __construct() {
		$this->_cPtr=SamlAdvice_dump($this->_cPtr);
	}
}

class SamlAssertion {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'SamlAssertion_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'SamlAssertion_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlAssertion();
	}

	function __construct() {
		$this->_cPtr=SamlAssertion_dump($this->_cPtr);
	}
}

class SamlAttribute {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'SamlAttribute_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'SamlAttribute_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlAttribute();
	}

	function __construct() {
		$this->_cPtr=SamlAttribute_dump($this->_cPtr);
	}
}

class SamlAttributeDesignator {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'attributeName') return SamlAttributeDesignator_attributeName_set($this->_cPtr,$value);
		if ($var == 'attributeNamespace') return SamlAttributeDesignator_attributeNamespace_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'attributeName') return SamlAttributeDesignator_attributeName_get($this->_cPtr);
		if ($var == 'attributeNamespace') return SamlAttributeDesignator_attributeNamespace_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlAttributeDesignator();
	}

	function __construct() {
		$this->_cPtr=SamlAttributeDesignator_dump($this->_cPtr);
	}
}

class SamlAttributeStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'subject') return SamlAttributeStatement_subject_set($this->_cPtr,$value);
		if ($var == 'attribute') return SamlAttributeStatement_attribute_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'subject') return SamlAttributeStatement_subject_get($this->_cPtr);
		if ($var == 'attribute') return SamlAttributeStatement_attribute_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlAttributeStatement();
	}

	function __construct() {
		$this->_cPtr=SamlAttributeStatement_dump($this->_cPtr);
	}
}

class SamlAttributeValue {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'any') return SamlAttributeValue_any_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'any') return SamlAttributeValue_any_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlAttributeValue();
	}

	function __construct() {
		$this->_cPtr=SamlAttributeValue_dump($this->_cPtr);
	}
}

class SamlAudienceRestrictionCondition {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'audience') return SamlAudienceRestrictionCondition_audience_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'audience') return SamlAudienceRestrictionCondition_audience_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlAudienceRestrictionCondition();
	}

	function __construct() {
		$this->_cPtr=SamlAudienceRestrictionCondition_dump($this->_cPtr);
	}
}

class SamlAuthenticationStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'SamlAuthenticationStatement_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'SamlAuthenticationStatement_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlAuthenticationStatement();
	}

	function __construct() {
		$this->_cPtr=SamlAuthenticationStatement_dump($this->_cPtr);
	}
}

class SamlAuthorityBinding {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'SamlAuthorityBinding_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'SamlAuthorityBinding_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlAuthorityBinding();
	}

	function __construct() {
		$this->_cPtr=SamlAuthorityBinding_dump($this->_cPtr);
	}
}

class SamlConditionAbstract {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=SamlConditionAbstract_dump($this->_cPtr);
	}
}

class SamlConditions {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'SamlConditions_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'SamlConditions_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlConditions();
	}

	function __construct() {
		$this->_cPtr=SamlConditions_dump($this->_cPtr);
	}
}

class SamlNameIdentifier {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'SamlNameIdentifier_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'SamlNameIdentifier_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlNameIdentifier();
	}

	function __construct() {
		$this->_cPtr=SamlNameIdentifier_dump($this->_cPtr);
	}
}

class SamlStatementAbstract {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=SamlStatementAbstract_dump($this->_cPtr);
	}
}

class SamlSubject {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'subjectConfirmation') return SamlSubject_subjectConfirmation_set($this->_cPtr,$value);
		if ($var == 'nameIdentifier') return SamlSubject_nameIdentifier_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'subjectConfirmation') return SamlSubject_subjectConfirmation_get($this->_cPtr);
		if ($var == 'nameIdentifier') return SamlSubject_nameIdentifier_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlSubject();
	}

	function __construct() {
		$this->_cPtr=SamlSubject_dump($this->_cPtr);
	}
}

class SamlSubjectConfirmation {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'confirmationMethod') return SamlSubjectConfirmation_confirmationMethod_set($this->_cPtr,$value);
		if ($var == 'subjectConfirmationData') return SamlSubjectConfirmation_subjectConfirmationData_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'confirmationMethod') return SamlSubjectConfirmation_confirmationMethod_get($this->_cPtr);
		if ($var == 'subjectConfirmationData') return SamlSubjectConfirmation_subjectConfirmationData_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlSubjectConfirmation();
	}

	function __construct() {
		$this->_cPtr=SamlSubjectConfirmation_dump($this->_cPtr);
	}
}

class SamlSubjectLocality {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'dnsAddress') return SamlSubjectLocality_dnsAddress_set($this->_cPtr,$value);
		if ($var == 'ipAddress') return SamlSubjectLocality_ipAddress_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'dnsAddress') return SamlSubjectLocality_dnsAddress_get($this->_cPtr);
		if ($var == 'ipAddress') return SamlSubjectLocality_ipAddress_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlSubjectLocality();
	}

	function __construct() {
		$this->_cPtr=SamlSubjectLocality_dump($this->_cPtr);
	}
}

class SamlSubjectStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'subject') return SamlSubjectStatement_subject_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'subject') return SamlSubjectStatement_subject_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlSubjectStatement();
	}

	function __construct() {
		$this->_cPtr=SamlSubjectStatement_dump($this->_cPtr);
	}
}

class SamlSubjectStatementAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'subject') return SamlSubjectStatementAbstract_subject_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'subject') return SamlSubjectStatementAbstract_subject_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=SamlSubjectStatementAbstract_dump($this->_cPtr);
	}
}

class SamlpRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'SamlpRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'SamlpRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlpRequest();
	}

	function __construct() {
		$this->_cPtr=SamlpRequest_dump($this->_cPtr);
	}
}

class SamlpRequestAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'SamlpRequestAbstract_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'SamlpRequestAbstract_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=SamlpRequestAbstract_dump($this->_cPtr);
	}
}

class SamlpResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'SamlpResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'SamlpResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlpResponse();
	}

	function __construct() {
		$this->_cPtr=SamlpResponse_dump($this->_cPtr);
	}
}

class SamlpResponseAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'SamlpResponseAbstract_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'SamlpResponseAbstract_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=SamlpResponseAbstract_dump($this->_cPtr);
	}
}

class SamlpStatus {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'statusMessage') return SamlpStatus_statusMessage_set($this->_cPtr,$value);
		if ($var == 'statusCode') return SamlpStatus_statusCode_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'statusMessage') return SamlpStatus_statusMessage_get($this->_cPtr);
		if ($var == 'statusCode') return SamlpStatus_statusCode_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlpStatus();
	}

	function __construct() {
		$this->_cPtr=SamlpStatus_dump($this->_cPtr);
	}
}

class SamlpStatusCode {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'value') return SamlpStatusCode_value_set($this->_cPtr,$value);
		if ($var == 'statusCode') return SamlpStatusCode_statusCode_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'value') return SamlpStatusCode_value_get($this->_cPtr);
		if ($var == 'statusCode') return SamlpStatusCode_statusCode_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_SamlpStatusCode();
	}

	function __construct() {
		$this->_cPtr=SamlpStatusCode_dump($this->_cPtr);
	}
}

class LibAssertion {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LibAssertion_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LibAssertion_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LibAssertion();
	}

	function __construct($issuer,$requestId,$audience,$notBefore,$notOnOrAfter) {
		$this->_cPtr=LibAssertion_newFull($issuer,$requestId,$audience,$notBefore,$notOnOrAfter);
	}

	function __construct() {
		$this->_cPtr=LibAssertion_dump($this->_cPtr);
	}
}

class LibAuthnRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LibAuthnRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LibAuthnRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LibAuthnRequest();
	}

	function __construct() {
		$this->_cPtr=LibAuthnRequest_dump($this->_cPtr);
	}
}

class LibAuthnResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LibAuthnResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LibAuthnResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($providerID,$request) {
		$this->_cPtr=new_LibAuthnResponse($providerID,$request);
	}

	function __construct() {
		$this->_cPtr=LibAuthnResponse_dump($this->_cPtr);
	}
}

class LibFederationTerminationNotification {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LibFederationTerminationNotification_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LibFederationTerminationNotification_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LibFederationTerminationNotification();
	}

	function __construct($providerID,$nameIdentifier,$sign_type,$sign_method) {
		$this->_cPtr=LibFederationTerminationNotification_newFull($providerID,$nameIdentifier,$sign_type,$sign_method);
	}

	function __construct() {
		$this->_cPtr=LibFederationTerminationNotification_dump($this->_cPtr);
	}
}

class LibLogoutRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LibLogoutRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LibLogoutRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LibLogoutRequest();
	}

	function __construct($providerID,$nameIdentifier,$sign_type,$sign_method) {
		$this->_cPtr=LibLogoutRequest_newFull($providerID,$nameIdentifier,$sign_type,$sign_method);
	}

	function __construct() {
		$this->_cPtr=LibLogoutRequest_dump($this->_cPtr);
	}
}

class LibLogoutResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LibLogoutResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LibLogoutResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LibLogoutResponse();
	}

	function __construct($providerID,$statusCodeValue,$request,$sign_type,$sign_method) {
		$this->_cPtr=LibLogoutResponse_newFull($providerID,$statusCodeValue,$request,$sign_type,$sign_method);
	}

	function __construct() {
		$this->_cPtr=LibLogoutResponse_dump($this->_cPtr);
	}
}

class LibRegisterNameIdentifierRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LibRegisterNameIdentifierRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LibRegisterNameIdentifierRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LibRegisterNameIdentifierRequest();
	}

	function __construct($providerID,$idpNameIdentifier,$spNameIdentifier,$oldNameIdentifier,$sign_type,$sign_method) {
		$this->_cPtr=LibRegisterNameIdentifierRequest_newFull($providerID,$idpNameIdentifier,$spNameIdentifier,$oldNameIdentifier,$sign_type,$sign_method);
	}

	function __construct() {
		$this->_cPtr=LibRegisterNameIdentifierRequest_dump($this->_cPtr);
	}
}

class LibRegisterNameIdentifierResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LibRegisterNameIdentifierResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LibRegisterNameIdentifierResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LibRegisterNameIdentifierResponse();
	}

	function __construct($providerID,$statusCodeValue,$request,$sign_type,$sign_method) {
		$this->_cPtr=LibRegisterNameIdentifierResponse_newFull($providerID,$statusCodeValue,$request,$sign_type,$sign_method);
	}

	function __construct() {
		$this->_cPtr=LibRegisterNameIdentifierResponse_dump($this->_cPtr);
	}
}

class LibRequestAuthnContext {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LibRequestAuthnContext_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LibRequestAuthnContext_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LibRequestAuthnContext();
	}

	function __construct() {
		$this->_cPtr=LibRequestAuthnContext_dump($this->_cPtr);
	}
}

class LibStatusResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'LibStatusResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'LibStatusResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_LibStatusResponse();
	}

	function __construct() {
		$this->_cPtr=LibStatusResponse_dump($this->_cPtr);
	}
}

class Provider {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Provider_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Provider_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($role,$metadata,$public_key,$ca_cert_chain) {
		$this->_cPtr=new_Provider($role,$metadata,$public_key,$ca_cert_chain);
	}

	function __construct($dump) {
		$this->_cPtr=Provider_newFromDump($dump);
	}

	function __construct() {
		$this->_cPtr=Provider_dump($this->_cPtr);
	}

	function acceptHttpMethod($remote_provider,$protocol_type,$http_method,$initiate_profile) {
		return Provider_acceptHttpMethod($this->_cPtr,$remote_provider,$protocol_type,$http_method,$initiate_profile);
	}

	function __construct($service_id) {
		$this->_cPtr=Provider_getAssertionConsumerServiceUrl($this->_cPtr,$service_id);
	}

	function __construct() {
		$this->_cPtr=Provider_getBase64SuccinctId($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=Provider_getOrganization($this->_cPtr);
	}

	function getFirstHttpMethod($remote_provider,$protocol_type) {
		return Provider_getFirstHttpMethod($this->_cPtr,$remote_provider,$protocol_type);
	}

	function __construct($name) {
		$this->_cPtr=Provider_getMetadataOne($this->_cPtr,$name);
	}

	function hasProtocolProfile($protocol_type,$protocol_profile) {
		return Provider_hasProtocolProfile($this->_cPtr,$protocol_type,$protocol_profile);
	}

	function getProtocolConformance() {
		return Provider_getProtocolConformance($this->_cPtr);
	}

	function __construct($encryption_mode) {
		$this->_cPtr=Provider_setEncryptionMode($this->_cPtr,$encryption_mode);
	}

	function __construct($encryption_sym_key_type) {
		$this->_cPtr=Provider_setEncryptionSymKeyType($this->_cPtr,$encryption_sym_key_type);
	}
}

class Server {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Server_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Server_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($metadata=null,$privateKey=null,$privateKeyPassword=null,$certificate=null) {
		switch (func_num_args()) {
		case 0: $r=new_Server(); break;
		case 1: $r=new_Server($metadata); break;
		case 2: $r=new_Server($metadata,$privateKey); break;
		case 3: $r=new_Server($metadata,$privateKey,$privateKeyPassword); break;
		default: $r=new_Server($metadata,$privateKey,$privateKeyPassword,$certificate);
		}
		$this->_cPtr=$r;
	}

	function __construct($dump) {
		$this->_cPtr=Server_newFromDump($dump);
	}

	function acceptHttpMethod($remote_provider,$protocol_type,$http_method,$initiate_profile) {
		return Server_acceptHttpMethod($this->_cPtr,$remote_provider,$protocol_type,$http_method,$initiate_profile);
	}

	function __construct($service_id) {
		$this->_cPtr=Server_getAssertionConsumerServiceUrl($this->_cPtr,$service_id);
	}

	function __construct() {
		$this->_cPtr=Server_getBase64SuccinctId($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=Server_getOrganization($this->_cPtr);
	}

	function getFirstHttpMethod($remote_provider,$protocol_type) {
		return Server_getFirstHttpMethod($this->_cPtr,$remote_provider,$protocol_type);
	}

	function __construct($name) {
		$this->_cPtr=Server_getMetadataOne($this->_cPtr,$name);
	}

	function hasProtocolProfile($protocol_type,$protocol_profile) {
		return Server_hasProtocolProfile($this->_cPtr,$protocol_type,$protocol_profile);
	}

	function getProtocolConformance() {
		return Server_getProtocolConformance($this->_cPtr);
	}

	function addProvider($role,$metadata,$publicKey=null,$caCertChain=null) {
		switch (func_num_args()) {
		case 2: $r=Server_addProvider($this->_cPtr,$role,$metadata); break;
		case 3: $r=Server_addProvider($this->_cPtr,$role,$metadata,$publicKey); break;
		default: $r=Server_addProvider($this->_cPtr,$role,$metadata,$publicKey,$caCertChain);
		}
		return $r;
	}

	function setEncryptionPrivateKey($filename) {
		return Server_setEncryptionPrivateKey($this->_cPtr,$filename);
	}

	function loadAffiliation($filename) {
		return Server_loadAffiliation($this->_cPtr,$filename);
	}

	function __construct() {
		$this->_cPtr=Server_dump($this->_cPtr);
	}

	function getProvider($providerId) {
		$r=Server_getProvider($this->_cPtr,$providerId);
		return is_resource($r) ? new Provider($r) : $r;
	}
}

class Federation {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Federation_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Federation_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($remoteProviderId) {
		$this->_cPtr=new_Federation($remoteProviderId);
	}

	function __construct() {
		$this->_cPtr=Federation_dump($this->_cPtr);
	}

	function buildLocalNameIdentifier($nameQualifier,$format,$content) {
		Federation_buildLocalNameIdentifier($this->_cPtr,$nameQualifier,$format,$content);
	}

	function verifyNameIdentifier($nameIdentifier) {
		return Federation_verifyNameIdentifier($this->_cPtr,$nameIdentifier);
	}
}

class Identity {
	public $_cPtr=null;

	function __get($var) {
		if ($var == 'isDirty') return Identity_isDirty_get($this->_cPtr);
		if ($var == 'providerIds') return Identity_providerIds_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Identity();
	}

	function __construct($dump) {
		$this->_cPtr=Identity_newFromDump($dump);
	}

	function __construct() {
		$this->_cPtr=Identity_dump($this->_cPtr);
	}

	function getFederation($providerId) {
		$r=Identity_getFederation($this->_cPtr,$providerId);
		return is_resource($r) ? new Federation($r) : $r;
	}
}

class Session {
	public $_cPtr=null;

	function __get($var) {
		if ($var == 'isDirty') return Session_isDirty_get($this->_cPtr);
		if ($var == 'providerIds') return Session_providerIds_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Session();
	}

	function __construct($dump) {
		$this->_cPtr=Session_newFromDump($dump);
	}

	function __construct() {
		$this->_cPtr=Session_dump($this->_cPtr);
	}

	function __construct($providerId) {
		$this->_cPtr=Session_getAssertions($this->_cPtr,$providerId);
	}
}

class Defederation {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Defederation_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Defederation_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_Defederation($server);
	}

	function setIdentityFromDump($dump) {
		return Defederation_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return Defederation_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildNotificationMsg() {
		return Defederation_buildNotificationMsg($this->_cPtr);
	}

	function initNotification($remoteProviderId=null,$httpMethod=null) {
		switch (func_num_args()) {
		case 0: $r=Defederation_initNotification($this->_cPtr); break;
		case 1: $r=Defederation_initNotification($this->_cPtr,$remoteProviderId); break;
		default: $r=Defederation_initNotification($this->_cPtr,$remoteProviderId,$httpMethod);
		}
		return $r;
	}

	function processNotificationMsg($notificationMsg) {
		return Defederation_processNotificationMsg($this->_cPtr,$notificationMsg);
	}

	function validateNotification() {
		return Defederation_validateNotification($this->_cPtr);
	}
}

class Login {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Login_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Login_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_Login($server);
	}

	function __construct($server,$dump) {
		$this->_cPtr=Login_newFromDump($server,$dump);
	}

	function setIdentityFromDump($dump) {
		return Login_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return Login_setSessionFromDump($this->_cPtr,$dump);
	}

	function acceptSso() {
		return Login_acceptSso($this->_cPtr);
	}

	function buildArtifactMsg($httpMethod) {
		return Login_buildArtifactMsg($this->_cPtr,$httpMethod);
	}

	function buildAssertion($authenticationMethod,$authenticationInstant,$reauthenticateOnOrAfter,$notBefore,$notOnOrAfter) {
		return Login_buildAssertion($this->_cPtr,$authenticationMethod,$authenticationInstant,$reauthenticateOnOrAfter,$notBefore,$notOnOrAfter);
	}

	function buildAuthnRequestMsg() {
		return Login_buildAuthnRequestMsg($this->_cPtr);
	}

	function buildAuthnResponseMsg() {
		return Login_buildAuthnResponseMsg($this->_cPtr);
	}

	function buildRequestMsg() {
		return Login_buildRequestMsg($this->_cPtr);
	}

	function buildResponseMsg($remoteProviderId) {
		return Login_buildResponseMsg($this->_cPtr,$remoteProviderId);
	}

	function __construct() {
		$this->_cPtr=Login_dump($this->_cPtr);
	}

	function initAuthnRequest($remoteProviderId=null,$httpMethod=null) {
		switch (func_num_args()) {
		case 0: $r=Login_initAuthnRequest($this->_cPtr); break;
		case 1: $r=Login_initAuthnRequest($this->_cPtr,$remoteProviderId); break;
		default: $r=Login_initAuthnRequest($this->_cPtr,$remoteProviderId,$httpMethod);
		}
		return $r;
	}

	function initRequest($responseMsg,$httpMethod=null) {
		switch (func_num_args()) {
		case 1: $r=Login_initRequest($this->_cPtr,$responseMsg); break;
		default: $r=Login_initRequest($this->_cPtr,$responseMsg,$httpMethod);
		}
		return $r;
	}

	function initIdpInitiatedAuthnRequest($remoteProviderID=null) {
		switch (func_num_args()) {
		case 0: $r=Login_initIdpInitiatedAuthnRequest($this->_cPtr); break;
		default: $r=Login_initIdpInitiatedAuthnRequest($this->_cPtr,$remoteProviderID);
		}
		return $r;
	}

	function mustAskForConsent() {
		return Login_mustAskForConsent($this->_cPtr);
	}

	function mustAuthenticate() {
		return Login_mustAuthenticate($this->_cPtr);
	}

	function processAuthnRequestMsg($authnrequestMsg) {
		return Login_processAuthnRequestMsg($this->_cPtr,$authnrequestMsg);
	}

	function processAuthnResponseMsg($authnResponseMsg) {
		return Login_processAuthnResponseMsg($this->_cPtr,$authnResponseMsg);
	}

	function processRequestMsg($requestMsg) {
		return Login_processRequestMsg($this->_cPtr,$requestMsg);
	}

	function processResponseMsg($responseMsg) {
		return Login_processResponseMsg($this->_cPtr,$responseMsg);
	}

	function setResourceId($content) {
		return Login_setResourceId($this->_cPtr,$content);
	}

	function validateRequestMsg($authenticationResult,$isConsentObtained) {
		return Login_validateRequestMsg($this->_cPtr,$authenticationResult,$isConsentObtained);
	}

	function processPaosResponseMsg($msg) {
		return Login_processPaosResponseMsg($this->_cPtr,$msg);
	}
}

class Logout {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Logout_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Logout_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_Logout($server);
	}

	function __construct($server,$dump) {
		$this->_cPtr=Logout_newFromDump($server,$dump);
	}

	function setIdentityFromDump($dump) {
		return Logout_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return Logout_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildRequestMsg() {
		return Logout_buildRequestMsg($this->_cPtr);
	}

	function buildResponseMsg() {
		return Logout_buildResponseMsg($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=Logout_dump($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=Logout_getNextProviderId($this->_cPtr);
	}

	function initRequest($remoteProviderId=null,$httpMethod=null) {
		switch (func_num_args()) {
		case 0: $r=Logout_initRequest($this->_cPtr); break;
		case 1: $r=Logout_initRequest($this->_cPtr,$remoteProviderId); break;
		default: $r=Logout_initRequest($this->_cPtr,$remoteProviderId,$httpMethod);
		}
		return $r;
	}

	function processRequestMsg($requestMsg) {
		return Logout_processRequestMsg($this->_cPtr,$requestMsg);
	}

	function processResponseMsg($responseMsg) {
		return Logout_processResponseMsg($this->_cPtr,$responseMsg);
	}

	function resetProviderIdIndex() {
		return Logout_resetProviderIdIndex($this->_cPtr);
	}

	function validateRequest() {
		return Logout_validateRequest($this->_cPtr);
	}
}

class Lecp {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Lecp_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Lecp_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_Lecp($server);
	}

	function setIdentityFromDump($dump) {
		return Lecp_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return Lecp_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildAssertion($authenticationMethod,$authenticationInstant,$reauthenticateOnOrAfter,$notBefore,$notOnOrAfter) {
		return Lecp_buildAssertion($this->_cPtr,$authenticationMethod,$authenticationInstant,$reauthenticateOnOrAfter,$notBefore,$notOnOrAfter);
	}

	function setResourceId($content) {
		return Lecp_setResourceId($this->_cPtr,$content);
	}

	function validateRequestMsg($authenticationResult,$isConsentObtained) {
		return Lecp_validateRequestMsg($this->_cPtr,$authenticationResult,$isConsentObtained);
	}

	function buildAuthnRequestEnvelopeMsg() {
		return Lecp_buildAuthnRequestEnvelopeMsg($this->_cPtr);
	}

	function buildAuthnRequestMsg() {
		return Lecp_buildAuthnRequestMsg($this->_cPtr);
	}

	function buildAuthnResponseEnvelopeMsg() {
		return Lecp_buildAuthnResponseEnvelopeMsg($this->_cPtr);
	}

	function buildAuthnResponseMsg() {
		return Lecp_buildAuthnResponseMsg($this->_cPtr);
	}

	function initAuthnRequest($remoteProviderId=null) {
		switch (func_num_args()) {
		case 0: $r=Lecp_initAuthnRequest($this->_cPtr); break;
		default: $r=Lecp_initAuthnRequest($this->_cPtr,$remoteProviderId);
		}
		return $r;
	}

	function processAuthnRequestEnvelopeMsg($requestMsg) {
		return Lecp_processAuthnRequestEnvelopeMsg($this->_cPtr,$requestMsg);
	}

	function processAuthnRequestMsg($authnRequestMsg) {
		return Lecp_processAuthnRequestMsg($this->_cPtr,$authnRequestMsg);
	}

	function processAuthnResponseEnvelopeMsg($responseMsg) {
		return Lecp_processAuthnResponseEnvelopeMsg($this->_cPtr,$responseMsg);
	}
}

class NameIdentifierMapping {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'NameIdentifierMapping_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'NameIdentifierMapping_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_NameIdentifierMapping($server);
	}

	function setIdentityFromDump($dump) {
		return NameIdentifierMapping_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return NameIdentifierMapping_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildRequestMsg() {
		return NameIdentifierMapping_buildRequestMsg($this->_cPtr);
	}

	function buildResponseMsg() {
		return NameIdentifierMapping_buildResponseMsg($this->_cPtr);
	}

	function initRequest($targetNamespace,$remoteProviderId=null) {
		switch (func_num_args()) {
		case 1: $r=NameIdentifierMapping_initRequest($this->_cPtr,$targetNamespace); break;
		default: $r=NameIdentifierMapping_initRequest($this->_cPtr,$targetNamespace,$remoteProviderId);
		}
		return $r;
	}

	function processRequestMsg($requestMsg) {
		return NameIdentifierMapping_processRequestMsg($this->_cPtr,$requestMsg);
	}

	function processResponseMsg($responseMsg) {
		return NameIdentifierMapping_processResponseMsg($this->_cPtr,$responseMsg);
	}

	function validateRequest() {
		return NameIdentifierMapping_validateRequest($this->_cPtr);
	}
}

class NameRegistration {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'NameRegistration_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'NameRegistration_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_NameRegistration($server);
	}

	function __construct($server,$dump) {
		$this->_cPtr=NameRegistration_newFromDump($server,$dump);
	}

	function setIdentityFromDump($dump) {
		return NameRegistration_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return NameRegistration_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildRequestMsg() {
		return NameRegistration_buildRequestMsg($this->_cPtr);
	}

	function buildResponseMsg() {
		return NameRegistration_buildResponseMsg($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=NameRegistration_dump($this->_cPtr);
	}

	function initRequest($remoteProviderId,$httpMethod=null) {
		switch (func_num_args()) {
		case 1: $r=NameRegistration_initRequest($this->_cPtr,$remoteProviderId); break;
		default: $r=NameRegistration_initRequest($this->_cPtr,$remoteProviderId,$httpMethod);
		}
		return $r;
	}

	function processRequestMsg($requestMsg) {
		return NameRegistration_processRequestMsg($this->_cPtr,$requestMsg);
	}

	function processResponseMsg($responseMsg) {
		return NameRegistration_processResponseMsg($this->_cPtr,$responseMsg);
	}

	function validateRequest() {
		return NameRegistration_validateRequest($this->_cPtr);
	}
}

class NameIdManagement {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'NameIdManagement_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'NameIdManagement_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_NameIdManagement($server);
	}

	function __construct($server,$dump) {
		$this->_cPtr=NameIdManagement_newFromDump($server,$dump);
	}

	function setIdentityFromDump($dump) {
		return NameIdManagement_setIdentityFromDump($this->_cPtr,$dump);
	}

	function setSessionFromDump($dump) {
		return NameIdManagement_setSessionFromDump($this->_cPtr,$dump);
	}

	function buildRequestMsg() {
		return NameIdManagement_buildRequestMsg($this->_cPtr);
	}

	function buildResponseMsg() {
		return NameIdManagement_buildResponseMsg($this->_cPtr);
	}

	function __construct() {
		$this->_cPtr=NameIdManagement_dump($this->_cPtr);
	}

	function initRequest($remoteProviderId=null,$new_name_id=null,$httpMethod=null) {
		switch (func_num_args()) {
		case 0: $r=NameIdManagement_initRequest($this->_cPtr); break;
		case 1: $r=NameIdManagement_initRequest($this->_cPtr,$remoteProviderId); break;
		case 2: $r=NameIdManagement_initRequest($this->_cPtr,$remoteProviderId,$new_name_id); break;
		default: $r=NameIdManagement_initRequest($this->_cPtr,$remoteProviderId,$new_name_id,$httpMethod);
		}
		return $r;
	}

	function processRequestMsg($requestMsg) {
		return NameIdManagement_processRequestMsg($this->_cPtr,$requestMsg);
	}

	function processResponseMsg($responseMsg) {
		return NameIdManagement_processResponseMsg($this->_cPtr,$responseMsg);
	}

	function validateRequest() {
		return NameIdManagement_validateRequest($this->_cPtr);
	}
}

class Ecp {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'request') return Ecp_request_set($this->_cPtr,$value);
		if ($var == 'response') return Ecp_response_set($this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Ecp_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct($server) {
		$this->_cPtr=new_Ecp($server);
	}

	function processAuthnRequestMsg($authnRequestMsg) {
		return Ecp_processAuthnRequestMsg($this->_cPtr,$authnRequestMsg);
	}

	function processResponseMsg($responseMsg) {
		return Ecp_processResponseMsg($this->_cPtr,$responseMsg);
	}
}

class Samlp2NameIDPolicy {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2NameIDPolicy_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2NameIDPolicy_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2NameIDPolicy();
	}

	function __construct() {
		$this->_cPtr=Samlp2NameIDPolicy_dump($this->_cPtr);
	}
}

class Samlp2RequestedAuthnContext {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2RequestedAuthnContext_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2RequestedAuthnContext_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2RequestedAuthnContext();
	}

	function __construct() {
		$this->_cPtr=Samlp2RequestedAuthnContext_dump($this->_cPtr);
	}
}

class Saml2Assertion {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Saml2Assertion_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Saml2Assertion_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2Assertion();
	}

	function __construct() {
		$this->_cPtr=Saml2Assertion_dump($this->_cPtr);
	}
}

class Samlp2IDPList {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'iDPEntry') return Samlp2IDPList_iDPEntry_set($this->_cPtr,$value);
		if ($var == 'getComplete') return Samlp2IDPList_getComplete_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'iDPEntry') return Samlp2IDPList_iDPEntry_get($this->_cPtr);
		if ($var == 'getComplete') return Samlp2IDPList_getComplete_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2IDPList();
	}

	function __construct() {
		$this->_cPtr=Samlp2IDPList_dump($this->_cPtr);
	}
}

class Saml2KeyInfoConfirmationData {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Saml2KeyInfoConfirmationData();
	}

	function __construct() {
		$this->_cPtr=Saml2KeyInfoConfirmationData_dump($this->_cPtr);
	}
}

class Saml2Conditions {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Saml2Conditions_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Saml2Conditions_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2Conditions();
	}

	function __construct() {
		$this->_cPtr=Saml2Conditions_dump($this->_cPtr);
	}
}

class Saml2Evidence {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Saml2Evidence();
	}

	function __construct() {
		$this->_cPtr=Saml2Evidence_dump($this->_cPtr);
	}
}

class Saml2NameID {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Saml2NameID_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Saml2NameID_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2NameID();
	}

	function __construct() {
		$this->_cPtr=Saml2NameID_dump($this->_cPtr);
	}
}

class Samlp2StatusCode {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'value') return Samlp2StatusCode_value_set($this->_cPtr,$value);
		if ($var == 'statusCode') return Samlp2StatusCode_statusCode_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'value') return Samlp2StatusCode_value_get($this->_cPtr);
		if ($var == 'statusCode') return Samlp2StatusCode_statusCode_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2StatusCode();
	}

	function __construct() {
		$this->_cPtr=Samlp2StatusCode_dump($this->_cPtr);
	}
}

class Samlp2Status {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2Status_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2Status_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2Status();
	}

	function __construct() {
		$this->_cPtr=Samlp2Status_dump($this->_cPtr);
	}
}

class Saml2ConditionAbstract {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Saml2ConditionAbstract();
	}

	function __construct() {
		$this->_cPtr=Saml2ConditionAbstract_dump($this->_cPtr);
	}
}

class Saml2OneTimeUse {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Saml2OneTimeUse();
	}

	function __construct() {
		$this->_cPtr=Saml2OneTimeUse_dump($this->_cPtr);
	}
}

class Saml2Advice {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Saml2Advice();
	}

	function __construct() {
		$this->_cPtr=Saml2Advice_dump($this->_cPtr);
	}
}

class Saml2BaseIDAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'nameQualifier') return Saml2BaseIDAbstract_nameQualifier_set($this->_cPtr,$value);
		if ($var == 'spNameQualifier') return Saml2BaseIDAbstract_spNameQualifier_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'nameQualifier') return Saml2BaseIDAbstract_nameQualifier_get($this->_cPtr);
		if ($var == 'spNameQualifier') return Saml2BaseIDAbstract_spNameQualifier_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2BaseIDAbstract();
	}

	function __construct() {
		$this->_cPtr=Saml2BaseIDAbstract_dump($this->_cPtr);
	}
}

class Saml2AuthnContext {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Saml2AuthnContext_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Saml2AuthnContext_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2AuthnContext();
	}

	function __construct() {
		$this->_cPtr=Saml2AuthnContext_dump($this->_cPtr);
	}
}

class Saml2SubjectLocality {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'dnsName') return Saml2SubjectLocality_dnsName_set($this->_cPtr,$value);
		if ($var == 'address') return Saml2SubjectLocality_address_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'dnsName') return Saml2SubjectLocality_dnsName_get($this->_cPtr);
		if ($var == 'address') return Saml2SubjectLocality_address_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2SubjectLocality();
	}

	function __construct() {
		$this->_cPtr=Saml2SubjectLocality_dump($this->_cPtr);
	}
}

class Saml2SubjectConfirmationData {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Saml2SubjectConfirmationData_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Saml2SubjectConfirmationData_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2SubjectConfirmationData();
	}

	function __construct() {
		$this->_cPtr=Saml2SubjectConfirmationData_dump($this->_cPtr);
	}
}

class Saml2SubjectConfirmation {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Saml2SubjectConfirmation_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Saml2SubjectConfirmation_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2SubjectConfirmation();
	}

	function __construct() {
		$this->_cPtr=Saml2SubjectConfirmation_dump($this->_cPtr);
	}
}

class Saml2ProxyRestriction {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'audience') return Saml2ProxyRestriction_audience_set($this->_cPtr,$value);
		if ($var == 'count') return Saml2ProxyRestriction_count_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'audience') return Saml2ProxyRestriction_audience_get($this->_cPtr);
		if ($var == 'count') return Saml2ProxyRestriction_count_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2ProxyRestriction();
	}

	function __construct() {
		$this->_cPtr=Saml2ProxyRestriction_dump($this->_cPtr);
	}
}

class Saml2StatementAbstract {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Saml2StatementAbstract();
	}

	function __construct() {
		$this->_cPtr=Saml2StatementAbstract_dump($this->_cPtr);
	}
}

class Saml2AuthnStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Saml2AuthnStatement_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Saml2AuthnStatement_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2AuthnStatement();
	}

	function __construct() {
		$this->_cPtr=Saml2AuthnStatement_dump($this->_cPtr);
	}
}

class Saml2AttributeStatement {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Saml2AttributeStatement();
	}

	function __construct() {
		$this->_cPtr=Saml2AttributeStatement_dump($this->_cPtr);
	}
}

class Samlp2IDPEntry {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2IDPEntry_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2IDPEntry_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2IDPEntry();
	}

	function __construct() {
		$this->_cPtr=Samlp2IDPEntry_dump($this->_cPtr);
	}
}

class Samlp2Extensions {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Samlp2Extensions();
	}

	function __construct() {
		$this->_cPtr=Samlp2Extensions_dump($this->_cPtr);
	}
}

class Saml2Action {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'content') return Saml2Action_content_set($this->_cPtr,$value);
		if ($var == 'namespace') return Saml2Action_namespace_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'content') return Saml2Action_content_get($this->_cPtr);
		if ($var == 'namespace') return Saml2Action_namespace_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2Action();
	}

	function __construct() {
		$this->_cPtr=Saml2Action_dump($this->_cPtr);
	}
}

class Samlp2StatusResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2StatusResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2StatusResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2StatusResponse();
	}

	function __construct() {
		$this->_cPtr=Samlp2StatusResponse_dump($this->_cPtr);
	}
}

class Samlp2Response {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2Response_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2Response_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2Response();
	}

	function __construct() {
		$this->_cPtr=Samlp2Response_dump($this->_cPtr);
	}
}

class Samlp2ArtifactResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2ArtifactResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2ArtifactResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2ArtifactResponse();
	}

	function __construct() {
		$this->_cPtr=Samlp2ArtifactResponse_dump($this->_cPtr);
	}
}

class Samlp2RequestAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2RequestAbstract_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2RequestAbstract_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2RequestAbstract();
	}

	function __construct() {
		$this->_cPtr=Samlp2RequestAbstract_dump($this->_cPtr);
	}
}

class Samlp2AssertionIDRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2AssertionIDRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2AssertionIDRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2AssertionIDRequest();
	}

	function __construct() {
		$this->_cPtr=Samlp2AssertionIDRequest_dump($this->_cPtr);
	}
}

class Samlp2ArtifactResolve {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2ArtifactResolve_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2ArtifactResolve_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2ArtifactResolve();
	}

	function __construct() {
		$this->_cPtr=Samlp2ArtifactResolve_dump($this->_cPtr);
	}
}

class Samlp2NameIDMappingRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2NameIDMappingRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2NameIDMappingRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2NameIDMappingRequest();
	}

	function __construct() {
		$this->_cPtr=Samlp2NameIDMappingRequest_dump($this->_cPtr);
	}
}

class Samlp2AuthnRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2AuthnRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2AuthnRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2AuthnRequest();
	}

	function __construct() {
		$this->_cPtr=Samlp2AuthnRequest_dump($this->_cPtr);
	}
}

class Samlp2SubjectQueryAbstract {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2SubjectQueryAbstract_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2SubjectQueryAbstract_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2SubjectQueryAbstract();
	}

	function __construct() {
		$this->_cPtr=Samlp2SubjectQueryAbstract_dump($this->_cPtr);
	}
}

class Samlp2AuthzDecisionQuery {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2AuthzDecisionQuery_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2AuthzDecisionQuery_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2AuthzDecisionQuery();
	}

	function __construct() {
		$this->_cPtr=Samlp2AuthzDecisionQuery_dump($this->_cPtr);
	}
}

class Samlp2AttributeQuery {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2AttributeQuery_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2AttributeQuery_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2AttributeQuery();
	}

	function __construct() {
		$this->_cPtr=Samlp2AttributeQuery_dump($this->_cPtr);
	}
}

class Saml2AudienceRestriction {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var == 'audience') return Saml2AudienceRestriction_audience_set($this->_cPtr,$value);
	}

	function __get($var) {
		if ($var == 'audience') return Saml2AudienceRestriction_audience_get($this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2AudienceRestriction();
	}

	function __construct() {
		$this->_cPtr=Saml2AudienceRestriction_dump($this->_cPtr);
	}
}

class Samlp2LogoutRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2LogoutRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2LogoutRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2LogoutRequest();
	}

	function __construct() {
		$this->_cPtr=Samlp2LogoutRequest_dump($this->_cPtr);
	}
}

class Samlp2AuthnQuery {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2AuthnQuery_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2AuthnQuery_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2AuthnQuery();
	}

	function __construct() {
		$this->_cPtr=Samlp2AuthnQuery_dump($this->_cPtr);
	}
}

class Saml2Attribute {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Saml2Attribute_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Saml2Attribute_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2Attribute();
	}

	function __construct() {
		$this->_cPtr=Saml2Attribute_dump($this->_cPtr);
	}
}

class Samlp2Terminate {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Samlp2Terminate();
	}

	function __construct() {
		$this->_cPtr=Samlp2Terminate_dump($this->_cPtr);
	}
}

class Samlp2StatusDetail {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Samlp2StatusDetail();
	}

	function __construct() {
		$this->_cPtr=Samlp2StatusDetail_dump($this->_cPtr);
	}
}

class Saml2AuthzDecisionStatement {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Saml2AuthzDecisionStatement_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Saml2AuthzDecisionStatement_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2AuthzDecisionStatement();
	}

	function __construct() {
		$this->_cPtr=Saml2AuthzDecisionStatement_dump($this->_cPtr);
	}
}

class Samlp2NameIDMappingResponse {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2NameIDMappingResponse_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2NameIDMappingResponse_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2NameIDMappingResponse();
	}

	function __construct() {
		$this->_cPtr=Samlp2NameIDMappingResponse_dump($this->_cPtr);
	}
}

class Saml2EncryptedElement {
	public $_cPtr=null;

	function __construct() {
		$this->_cPtr=new_Saml2EncryptedElement();
	}

	function __construct() {
		$this->_cPtr=Saml2EncryptedElement_dump($this->_cPtr);
	}
}

class Samlp2ManageNameIDRequest {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2ManageNameIDRequest_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2ManageNameIDRequest_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2ManageNameIDRequest();
	}

	function __construct() {
		$this->_cPtr=Samlp2ManageNameIDRequest_dump($this->_cPtr);
	}
}

class Samlp2Scoping {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Samlp2Scoping_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Samlp2Scoping_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Samlp2Scoping();
	}

	function __construct() {
		$this->_cPtr=Samlp2Scoping_dump($this->_cPtr);
	}
}

class Saml2Subject {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'Saml2Subject_'.$var.'_set';
		if (function_exists($func) call_user_func($func,$this->_cPtr,$value);
	}

	function __get($var) {
		$func = 'Saml2Subject_'.$var.'_get';
		if (function_exists($func) return call_user_func($func,$this->_cPtr);
		return null;
	}

	function __construct() {
		$this->_cPtr=new_Saml2Subject();
	}

	function __construct() {
		$this->_cPtr=Saml2Subject_dump($this->_cPtr);
	}
}


?>
