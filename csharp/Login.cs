/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version: 1.3.21
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

//package lasso;

using System;
public class Login : IDisposable {
  private IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal Login(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected Login() : this(IntPtr.Zero, false) {
  }

  ~Login() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      lassoPINVOKE.delete_Login(swigCPtr);
    }
    swigCPtr = IntPtr.Zero;
    GC.SuppressFinalize(this);
  }

  internal static IntPtr getCPtr(Login obj) {
    return (obj == null) ? IntPtr.Zero : obj.swigCPtr;
  }

  public string assertionArtifact {
    get {
      return lassoPINVOKE.get_Login_assertionArtifact(swigCPtr);
    } 
  }

  public int protocolProfile {
    get {
      return lassoPINVOKE.get_Login_protocolProfile(swigCPtr);
    } 
  }

  public AuthnRequest authnRequest {
    get {
      IntPtr cPtr = lassoPINVOKE.get_Login_authnRequest(swigCPtr);
      return (cPtr == IntPtr.Zero) ? null : new AuthnRequest(cPtr, false);
    } 
  }

  public AuthnResponse authnResponse {
    get {
      IntPtr cPtr = lassoPINVOKE.get_Login_authnResponse(swigCPtr);
      return (cPtr == IntPtr.Zero) ? null : new AuthnResponse(cPtr, false);
    } 
  }

  public Identity identity {
    set {
      lassoPINVOKE.set_Login_identity(swigCPtr, Identity.getCPtr(value));
    } 
    get {
      IntPtr cPtr = lassoPINVOKE.get_Login_identity(swigCPtr);
      return (cPtr == IntPtr.Zero) ? null : new Identity(cPtr, false);
    } 
  }

  public bool isIdentityDirty {
    get {
      return lassoPINVOKE.get_Login_isIdentityDirty(swigCPtr);
    } 
  }

  public bool isSessionDirty {
    get {
      return lassoPINVOKE.get_Login_isSessionDirty(swigCPtr);
    } 
  }

  public string msgBody {
    get {
      return lassoPINVOKE.get_Login_msgBody(swigCPtr);
    } 
  }

  public string msgRelayState {
    get {
      return lassoPINVOKE.get_Login_msgRelayState(swigCPtr);
    } 
  }

  public string msgUrl {
    get {
      return lassoPINVOKE.get_Login_msgUrl(swigCPtr);
    } 
  }

  public string nameIdentifier {
    get {
      return lassoPINVOKE.get_Login_nameIdentifier(swigCPtr);
    } 
  }

  public string remoteProviderId {
    set {
      lassoPINVOKE.set_Login_remoteProviderId(swigCPtr, value);
    } 
    get {
      return lassoPINVOKE.get_Login_remoteProviderId(swigCPtr);
    } 
  }

  public Request request {
    get {
      IntPtr cPtr = lassoPINVOKE.get_Login_request(swigCPtr);
      return (cPtr == IntPtr.Zero) ? null : new Request(cPtr, false);
    } 
  }

  public Response response {
    get {
      IntPtr cPtr = lassoPINVOKE.get_Login_response(swigCPtr);
      return (cPtr == IntPtr.Zero) ? null : new Response(cPtr, false);
    } 
  }

  public string responseStatus {
    set {
      lassoPINVOKE.set_Login_responseStatus(swigCPtr, value);
    } 
    get {
      return lassoPINVOKE.get_Login_responseStatus(swigCPtr);
    } 
  }

  public Session session {
    set {
      lassoPINVOKE.set_Login_session(swigCPtr, Session.getCPtr(value));
    } 
    get {
      IntPtr cPtr = lassoPINVOKE.get_Login_session(swigCPtr);
      return (cPtr == IntPtr.Zero) ? null : new Session(cPtr, false);
    } 
  }

  public Assertion assertion {
    set {
      lassoPINVOKE.set_Login_assertion(swigCPtr, Assertion.getCPtr(value));
    } 
    get {
      IntPtr cPtr = lassoPINVOKE.get_Login_assertion(swigCPtr);
      return (cPtr == IntPtr.Zero) ? null : new Assertion(cPtr, false);
    } 
  }

  public Login(Server server) : this(lassoPINVOKE.new_Login(Server.getCPtr(server)), true) {
  }

  public static Login newFromDump(Server server, string dump) {
    IntPtr cPtr = lassoPINVOKE.Login_newFromDump(Server.getCPtr(server), dump);
    return (cPtr == IntPtr.Zero) ? null : new Login(cPtr, true);
  }

  public void setAssertionFromDump(string dump) {
    lassoPINVOKE.Login_setAssertionFromDump(swigCPtr, dump);
  }

  public void setIdentityFromDump(string dump) {
    lassoPINVOKE.Login_setIdentityFromDump(swigCPtr, dump);
  }

  public void setSessionFromDump(string dump) {
    lassoPINVOKE.Login_setSessionFromDump(swigCPtr, dump);
  }

  public void acceptSso() {
    lassoPINVOKE.Login_acceptSso(swigCPtr);
  }

  public void buildArtifactMsg(int authenticationResult, string authenticationMethod, string reauthenticateOnOrAfter, int httpMethod) {
    lassoPINVOKE.Login_buildArtifactMsg(swigCPtr, authenticationResult, authenticationMethod, reauthenticateOnOrAfter, httpMethod);
  }

  public void buildAuthnRequestMsg(string remoteProviderId) {
    lassoPINVOKE.Login_buildAuthnRequestMsg(swigCPtr, remoteProviderId);
  }

  public void buildAuthnResponseMsg(int authenticationResult, string authenticationMethod, string reauthenticateOnOrAfter) {
    lassoPINVOKE.Login_buildAuthnResponseMsg(swigCPtr, authenticationResult, authenticationMethod, reauthenticateOnOrAfter);
  }

  public void buildRequestMsg() {
    lassoPINVOKE.Login_buildRequestMsg(swigCPtr);
  }

  public void buildResponseMsg() {
    lassoPINVOKE.Login_buildResponseMsg(swigCPtr);
  }

  public string dump() {
    return lassoPINVOKE.Login_dump(swigCPtr);
  }

  public void initAuthnRequest(int httpMethod) {
    lassoPINVOKE.Login_initAuthnRequest(swigCPtr, httpMethod);
  }

  public void initFromAuthnRequestMsg(string authnrequestMsg, int httpMethod) {
    lassoPINVOKE.Login_initFromAuthnRequestMsg(swigCPtr, authnrequestMsg, httpMethod);
  }

  public void initRequest(string responseMsg, int httpMethod) {
    lassoPINVOKE.Login_initRequest(swigCPtr, responseMsg, httpMethod);
  }

  public bool mustAuthenticate() {
    return lassoPINVOKE.Login_mustAuthenticate(swigCPtr);
  }

  public void processAuthnResponseMsg(string authnResponseMsg) {
    lassoPINVOKE.Login_processAuthnResponseMsg(swigCPtr, authnResponseMsg);
  }

  public void processRequestMsg(string requestMsg) {
    lassoPINVOKE.Login_processRequestMsg(swigCPtr, requestMsg);
  }

  public void processResponseMsg(string responseMsg) {
    lassoPINVOKE.Login_processResponseMsg(swigCPtr, responseMsg);
  }

}
